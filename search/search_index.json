{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"1. About","text":"<p>Support Policy</p> <p>This is an enablement project created by the Center of Excellence - Enablement Team at Dynatrace.</p> <p>Support is provided via GitHub issues only. The materials provided in this repository are offered \"as-is\" without any warranties, express or implied. Use them at your own risk.</p>"},{"location":"#live-debugger-tutorial-bug-hunting-the-todo-app","title":"Live Debugger Tutorial - Bug Hunting the TODO App","text":""},{"location":"#whats-this-tutorial-all-about","title":"What's this tutorial all about","text":"<p>In this tutorial we will embark on a Bug Hunting journey learning the different features of the Live Debugger and capabilities of the Dynatrace Platform.</p> <p>The Live Debugger is a solution within the package of Observability for Developers of the Dynatrace Platform which provides developers with instant access to code-level debug data needed to troubleshoot and understand complex, modern applications with no extra coding, redeployments, or restarts.</p> <ul> <li>Debug in any environment or application and run with any architecture</li> <li>Instant insights and data from any issue</li> <li>Full visibility into code</li> <li>Instantly debug complex workflows</li> <li>Built for hybrid cloud architectures and large-scale deployments</li> <li>Robust security and data privacy controls</li> <li>Increase developer satisfaction &amp; happiness (remove frustrations)</li> </ul> <p> </p> <p>Are you ready to start the Bug hunting journey and to learn how to improve and empower the developer's productivity? </p> <p>What will we do</p> <p>In this tutorial we will learn how easy it is to live debug an application in a Kubernetes Cluster. This is a TODO application which should help us be more effective but unfortunately it has bugs. So let's find them so we can be more productive and effective!</p> <ul> <li>Yes! let's begin </li> </ul>"},{"location":"1-bug-clear-completed/","title":"\ud83e\udeb2 Bug - Clear Complete","text":"<p>The Bug 'Clear completed'</p> <p>Level: Beginner</p>"},{"location":"1-bug-clear-completed/#open-the-todo-app-and-add-a-couple-of-tasks","title":"Open the TODO App and add a couple of tasks","text":"<p>In VSCode open a new terminal and in the Welcome Message you should see a link to the Todo App UI. Click on it. Now add a couple of tasks. It should look something like this: </p> <ul> <li>Add a couple of tasks. </li> <li>Complete some of them (or all, depending how productive you are ;) . </li> <li>Now click on: <code>Clear completed</code> </li> </ul> <p></p> <ul> <li>Are the tasks cleared?</li> </ul> <p>Apparently the button does not work. When clicked - completed todos are not cleared. </p> <p>We embark on our Bug hunting journey! </p> <p>There are multiple ways to dive deep into the issue because Dynatrace is monitoring your Kubernetes cluster, all workloads in it, all it's traces with code level insights and all real users accessing the exposed application.</p> <ul> <li>Click Here to continue the quest</li> </ul>"},{"location":"1-bug-hunt-via-k8s/","title":"\ud83d\udca1 Hunt via Kubernetes App","text":""},{"location":"1-bug-hunt-via-k8s/#hunting-via-the-kubernetes-road","title":"Hunting via the kubernetes road","text":"<ul> <li>Open the Kubernetes App &gt; You'll see a cluster with the name \"codespace-xxxx\". That's your Kind cluster being fully observed.</li> </ul> <ul> <li> <p>On the right hand side, click on Workloads, the Workloads Page will open. </p> </li> <li> <p>Select the <code>todoapp</code>workload. </p> </li> </ul> <p></p> <ul> <li>On the Overview in the right hand side, scroll down and open the <code>Services</code> app.  Dynatrace groups telemetry from distributed traces and spans into \"Services\" for you!</li> </ul> <p></p> <ul> <li>Click on the TodoController service and then on the right corner <code>View Traces</code></li> </ul> <p></p> <ul> <li>This will open all the traces that went through your application... wow!</li> </ul> <p>As you can see, there are traces with the name <code>clearCompletedTodos</code> that just took a couple ms and are not throwing any errors. The response code is 200, but since this is a bug it does not mean the application is working as expected.</p> <p>This specific span it was just 2.98ms. On the right hand side, you can see the Tracing details, look how much data was captured automatically \ud83e\udd29.</p> <p></p> <p>In the second node of the span, in the Code Attributes section, we can see the <code>Code function: clearCompletedTodos</code> and the <code>Code Namespace: com.dynatrace.todoapp.TodoController</code> </p> <p>Now we know which method and which package! Let's put our Developer Hat \ud83c\udfa9 and open the Live Debugger.</p>"},{"location":"1-bug-hunt-via-k8s/#open-live-debugger","title":"Open Live Debugger","text":"<p>Type CTRL + K &gt; Live Debugger for super fast access to the Live Debugger application. </p> <p>First we want to cuztomize our debuggin session to match the workloads where we want to set a non-breaking breakpoint. Click on the pencil icon to \"Customize your debug session\" so we can add the filters <code>namespace:todoapp</code> <code>k8s.workload.name:todoapp</code>. This information was also available in the trace that we just took a look at. There are multiple filters you can add, important here is to have a filter that can be reused and is not specifc to an instance in case the pods a recycled and you want to make sure you are always setting breakpoints to a specific workload in a specific cluster (or multiple).</p> <p></p>"},{"location":"1-bug-hunt-via-k8s/#connect-the-github-repository-manually","title":"Connect the Github repository (manually)","text":"<p>Once you click next, no repository was found for this application (this is because no repo was configured). Let's add it manually.</p> <ul> <li> <p>Click on the + sign to add a new one </p> </li> <li> <p>Click on authenticate. It'll open a window where you'll authenticate with your GitHub personal account.</p> </li> </ul> <p>Why? we take security very seriously, meaning the source code will never leave the browser, the client. </p> <ul> <li>In organisation you enter: <code>dynatrace-wwse</code></li> <li>In Repository you enter this repo: <code>enablement-live-debugger-bug-hunting</code></li> </ul> <p></p> <ul> <li>Click on Done!</li> </ul> <p>Now you are all set! you should see an  image like this:</p> <p></p>"},{"location":"1-bug-hunt-via-k8s/#navigate-to-the-todocontrollerjava","title":"Navigate to the TodoController.java","text":"<p>You have multiple ways to open the TodoController.java. Let's say you know the code, then easily you'll navigate to it by opening the Source Code menu on the left pane, navigate to: <code>todoapp &gt; src &gt; main &gt; java &gt; com &gt; dynatrace &gt; todoapp &gt; TodoController.java</code></p> <p>if you don't know the structure, use the search and type <code>TodoController</code>it'll search for all matches, you'll see the Class file so you can open it.</p> <p></p> <p>Now let's search for the Method <code>clearCompletedTodos</code>. You'll find the Method definition at line 72. </p> <p><code>72</code> @RequestMapping(value = \"/todos/clear_completed\", method = RequestMethod.DELETE) <code>73</code> public ResponseEntity&lt;?&gt; clearCompletedTodos() throws InterruptedException {</p> <p>We need to set a non-breaking breakpoint on running code inside the method, for this I recommend to start setting it on the <code>return</code> code which is at line 92. This way we gather the values of the variables before they are sent back to the client.</p> <p><code>92</code> return new ResponseEntity&lt;&gt;(entities, HttpStatus.OK);</p> <p>You can set a non-breaking breakpoint by clicking just to the left of the line number.  Set it and wait for the status to change to Active.</p> <p></p> <p>Go back to the TODO app and clear again on \"Clear completed\"</p> <p>Return to the Live Debugger and see the Snaphot captured, open it and see all the variables that were captured with their values.</p> <p></p> <p>Do you see the bug? can you understand what happened and why the completed todos are not deleted? We can see two variables, the <code>todos</code> with a length of 3 and <code>todoStore</code> with a length of 0.</p> <p>In line 84 <code>todoStore.remove(todoRecord)</code> the variable todoStore is a newly instantiated variable. This is a mistake, it should be replaced by the variable <code>todos</code> so the function can succesfully remove all cleared tasks!</p> <p>Yay! we found the first bug!!!</p> <p>Seeing is believing \ud83e\udd29</p> <p>Did you notice? With Dynatrace we were able to navigate from the Kubernetes Cluster all the way down to the workload, it's traces cotinuing down to the specific method and namespace of the called function and variables. With one click on the method we were able to set a non-breaking breakpoint in our production application deployed in a Kubernetes Cluster where with a single snapshot we were able to identify the bug. Debugging Kubernetes Clusters has never been so easy!!! And in Production!! \ud83e\udd2f</p> <p>Fix the bug \ud83e\udeb2\ud83d\udee0\ufe0f</p> <p>Go back to your Codespace and find the source code for the <code>TodoController</code>. It should be under the following path: <code>app/src/main/java/com/dynatrace/todoapp/TodoController.java</code>. Once you apply the fix, run the following command in the terminal:</p> <pre><code>redeployApp\n</code></pre> <p>2</p> <p></p> \ud83d\udca1 Hint  Before <pre><code>List&lt;TodoRecord&gt; todoStore = new ArrayList&lt;&gt;();\nlogger.debug(\"todoStore size is {}\", todoStore.size());\nfor (TodoRecord todoRecord : todos.getAll()) {\n    if (todoRecord.isCompleted()) {\n        if (todoStore.remove(todoRecord)) {\n            logger.info(\"Removing Todo record: {}\", todoRecord);\n        }\n    }\n}\n</code></pre>  After <pre><code>//List&lt;TodoRecord&gt; todoStore = new ArrayList&lt;&gt;();\n//logger.debug(\"todoStore size is {}\", todoStore.size());\nfor (TodoRecord todoRecord : todos.getAll()) {\n    if (todoRecord.isCompleted()) {\n        //if (todoStore.remove(todoRecord)) {\n        if (todos.remove(todoRecord)) {\n            logger.info(\"Removing Todo record: {}\", todoRecord);\n        }\n    }\n}\n</code></pre> <ul> <li>Click here to continue the quest with the next Bug</li> </ul>"},{"location":"2-bug-hunt-via-tracing/","title":"\ud83d\udca1 Hunt via Distributed Traces","text":""},{"location":"2-bug-hunt-via-tracing/#open-the-distributed-tracing-app","title":"Open the Distributed Tracing App","text":"<p>Protip: Open the Tracing App anywhere in Dynatrace</p> <p>Type CTRL + K, then search for 'Tracing'. The Tracing App should appear in the Super Search. </p> <p>Want to learn more about the Tracing App?</p> <p>If you want to learn more about the new Distributed Tracing App, watch this amazing 12 min recording of Dynatrace App Spotlights</p> <p>In the filter add:</p> <pre><code>\"Kubernetes namespace\" = todoapp AND \"Kubernetes workload\" = todoapp\n</code></pre> <p>You can also let the autocomplete help you or use the facets on the left-hand side to filter for all requests of the Pod <code>todoapp</code> that is deployed in the namespace <code>todoapp</code>.</p> <p></p> <p>If we take a look at the traces, we can see there is a trace named <code>addTodo</code>. By opening this trace, in the details pane on the right-hand side, we can see in the <code>Code Attributes</code> that the <code>Code function = addTodo</code> and the <code>Code Namespace = com.dynatrace.todoapp.TodoController</code></p> <p>Now we know where in the application code we should be looking for the bug!</p>"},{"location":"2-bug-hunt-via-tracing/#open-the-live-debugger","title":"Open the Live Debugger","text":"<ul> <li>Let's search for the <code>Code function = addTodo</code> under the <code>Code Namespace = com.dynatrace.todoapp.TodoController</code>. In the search,  type <code>TodoController</code> the class file appears, open it.</li> <li>Now let's search for the <code>AddTodo</code> function, the declaration is in line 24.</li> </ul> <p>Notice anything unusual? The developer left a String function on line 28:</p> <p><code>28</code> String todoTitle = newTodoRecord.getTitle().replaceAll(\"[^a-zA-Z0-9\\s]+\", \"\");</p> <ul> <li>Let's add two breakpoints around that line, one before, let's say on line 25 and another on line 32.</li> </ul> <p></p> <ul> <li>Go to the TodoApp in your browser and add a Task with a special character.</li> </ul> <p>Task: <pre><code>This is exciting!!!\n</code></pre></p> <ul> <li>Go back to the Live Debugger and watch the two snapshots, snapshots get gathered in real time.</li> </ul> <p></p> <ul> <li>If you open the first snapshot, the one on line 25, you'll notice the Object <code>newTodoRecord.title = This is exciting!!!</code> that contains the exclamation mark. Meaning the data is being correctly passed on to the function <code>addTodo</code>, but then something happens and the <code>!!!</code> are removed.</li> <li>If you then look for the same attribute in the same method on the second snapshot you'll see that the <code>!!!</code> are gone.</li> </ul>"},{"location":"2-bug-hunt-via-tracing/#watching-variables","title":"Watching variables","text":"<ul> <li>We want to make your life as a developer easier. With the Live Debugger you can watch variables, right click on the  <code>newTodoRecord.title</code> and select <code>Watch</code></li> </ul> <ul> <li>You'll see that in the snapshots, the title variable captured in both snapshots are added for ease of debugging complex applications. This is a very simple app, but imagine you have hundreds or thousands of lines of code, not all of them written by you, using this strategy you can understand how specific variables change through the code.</li> </ul> <p>Fix the bug \ud83e\udeb2\ud83d\udee0\ufe0f</p> <p>Go back to your Codespace and find the source code for the <code>TodoController</code>. It should be under the following path: <code>app/src/main/java/com/dynatrace/todoapp/TodoController.java</code>. Once you apply the fix, run the following commands:</p> <pre><code>redeployApp\n</code></pre> <p></p> \ud83d\udca1 Hint  Before <pre><code>String todoTitle = newTodoRecord.getTitle().replaceAll(\"[^a-zA-Z0-9\\\\s]+\", \"\");\nnewTodoRecord.setTitle(todoTitle);\n</code></pre>  After <pre><code>//String todoTitle = newTodoRecord.getTitle().replaceAll(\"[^a-zA-Z0-9\\\\s]+\", \"\");\nString todoTitle = newTodoRecord.getTitle();\nnewTodoRecord.setTitle(todoTitle);\n</code></pre> <p></p> <ul> <li>Click here to continue the quest with the next Bug</li> </ul>"},{"location":"2-bug-special-characters/","title":"\ud83e\udeb2  Bug - Special Characters","text":"<p>The Bug 'Special characters'</p> <p>Level: Beginner</p>"},{"location":"2-bug-special-characters/#add-a-new-task","title":"Add a new Task","text":"<p>Open the TODO App and add a Task with an exclamation mark <code>!</code></p> <ul> <li>Add a task with an exclamation mark! or a special character for that matter, like this:</li> </ul> <p></p> <ul> <li>Now type ENTER to add the task</li> </ul> <p></p> <ul> <li>What happened? As you can see the signs are being removed. Why?</li> </ul> <p>Let's continue with the bug hunting again! Now, let's assume we are new developers in the TODO app company. How difficult would it be to find the bug? To know where is the app running? which pod is delivering the requests? which namespace and line of code? Well, not with Dynatrace! We already learned how easy it was to find the TODO app within the Kubernetes App and from there we opened the traces in the Distributed Tracing app, so let's go there.</p> <ul> <li>Click here to Continue the quest</li> </ul>"},{"location":"3-bug-duplicate-task/","title":"\ud83e\udeb2 Bug - Duplicate Task","text":"<p>The Bug 'Duplicate task'</p> <p>Level: Intermediate</p>"},{"location":"3-bug-duplicate-task/#open-the-todo-app-and-add-a-task","title":"Open the TODO App and add a Task","text":"<p>The TODO app has a duplicate function, let's give it a try.</p> <ul> <li>Add a Task that we want to duplicate, we add Call the Bugbusters</li> </ul> <p>Task: <pre><code>Call the Bugbusters\n</code></pre></p> <p></p> <ul> <li>Hover over the added Task and on the right you'll notice a &amp; symbol. This should duplicate the task. </li> </ul> <p>What happened?  We notice a new task was created, but instead of a duplicate we see a weird string, looks like an ID. </p> <p>Let's continue our Bug Hunting Quest!</p> <ul> <li>Click here to continue the quest</li> </ul>"},{"location":"3-bug-hunt-via-logs/","title":"\ud83d\udca1 Hunt via Logs","text":""},{"location":"3-bug-hunt-via-logs/#hunting-road-logs-app","title":"Hunting road - Logs App","text":"<p>We have seen how easy it is to find the traces via the Distributed Tracing App, now let's try a different approach. Let's find the trace, it's method and codespace via the Logs App. The Dynatrace Platform is context aware, it knows which traces write which logs, from which pod they are coming from and even which user generated the transaction.</p> <ul> <li>Open the Logs App. Again let's be a pro and type CTRL + K and then type in Logs, the Logs App should appear in the super search.</li> <li>In the filter, type the content or part of the content of the Task, <code>Call the Bugbusters</code>. I'm assuming the developers is logging the content I'm writing in the app since \"we don't know the code\" and in our quests we are searching via logs. Let's see if we are lucky.</li> </ul> <p>Filter: <pre><code>content=*bugbusters*\n</code></pre></p> <p> Wow, that was fast, we see two log entries with that match and are coming from the same pod. One was adding the task, the other duplicating it.</p> <p>From the <code>content</code> if you look carefully, you can see that the duplicate has the ID and title swapped.</p> <p></p> <p>To view the related distributed trace, we can either: - Right click on the Log line and open record with and you select the Distributed Tracing app - On the right details pane, above the Topology section of the Log entry, there is a button for your convenience that says Open trace</p> <p></p>"},{"location":"3-bug-hunt-via-logs/#hunting-road-distributed-tracing-app","title":"Hunting road - Distributed Tracing App","text":"<p>Via the Distributed Tracing app</p> <p>In case you want to skip searching the Trace via the log entries, here is how to find it only via traces:</p> <ul> <li>In the filter add <code>\"Kubernetes namespace\" = todoapp AND \"Kubernetes workload\" = todoapp</code> </li> <li>See the incoming requests, you'll notice one with the name <code>duplicateTodo</code></li> </ul> <ul> <li> <p>The trace has the <code>Code function = duplicateTodo</code> and the <code>Code Namespace = com.dynatrace.todoapp.TodoController</code></p> </li> <li> <p>Now that we have the trace, we can notice that it has also a HTTP Status Code of 200, meaning there are no failures, but the app does not work as we want it to work. Let's debug the function!</p> </li> </ul>"},{"location":"3-bug-hunt-via-logs/#open-the-live-debugger","title":"Open the Live Debugger","text":"<ul> <li>Let's search for the <code>Code function = duplicateTodo</code> under the <code>Code Namespace = com.dynatrace.todoapp.TodoController</code>. In the search,  type <code>TodoController</code> the class file appears, open it.</li> <li>Now let's search for the <code>duplicateTodo</code> function, the declaration is in line 95.</li> <li>Let's put a non-breaking breakpoint on line 107</li> </ul> <ul> <li>Go to the Todo app and repeat the bug.</li> <li>Return to the Live Debugger session and click on the new snapshot.  Review the variables.</li> </ul> <p>Did you notice how the Map has in the items [0] and [1] the title and UUIDs are swapped?</p> <p>Looking at the source code, in lines 102 and 103, the variables are incorrectly set because the functions are swapped! </p> <p></p> <p>Now the developer can easily fix this code and resolve the issue!</p> <p>We've now successfully hunted down and taken care of another bug \ud83e\udd29</p> <p>Fix the bug \ud83e\udeb2\ud83d\udee0\ufe0f</p> <p>Go back to your Codespace and find the source code for the <code>TodoController</code>. It should be under the following path: <code>app/src/main/java/com/dynatrace/todoapp/TodoController.java</code>. Once you apply the fix, run the following commands:</p> <pre><code>redeployApp\n</code></pre> <p></p> \ud83d\udca1 Hint  Before <pre><code>newTodoRecord.setId(tempTodoRecord.getTitle());\nnewTodoRecord.setTitle(UUID.randomUUID().toString());\n</code></pre>  After <pre><code>newTodoRecord.setId(UUID.randomUUID().toString());\nnewTodoRecord.setTitle(tempTodoRecord.getTitle());\n</code></pre> <p></p> <ul> <li>Click here to continue </li> </ul>"},{"location":"cleanup/","title":"8. Cleanup","text":"<p>Deleting the codespace from inside the container</p> <p>We like to make your life easier, for convenience there is a function loaded in the shell of the Codespace for deleting the codespace, just type <code>deleteCodespace</code>. This will trigger the deletion of the codespace.</p> <p>Another way to do this is by going to https://github.com/codespaces and delete the codespace.</p> <p>You may also want to deactivate or delete the API tokens needed for this lab.</p> <ul> <li>Ressources</li> </ul>"},{"location":"codespaces/","title":"Codespaces","text":"<p>This Codespace leverages the Dynatrace Enablement Framework, providing a robust and flexible development environment. Key features include:</p> <ul> <li>Seamless operation within GitHub Codespaces, as a remote container, or locally via Docker.</li> <li>Cross-compilation support for both AMD and ARM architectures, ensuring broad compatibility.</li> <li>Adherence to industry standards and best practices to optimize the developer experience.</li> <li>Real-time observability of Kubernetes clusters using Dynatrace Full-Stack monitoring.</li> <li>Integrated Dynatrace MCP Server to deliver deep, actionable insights across distributed systems.</li> </ul> <p>To learn more about the Dynatrace Enablement Framework and how it can enhance your development workflow, please refer to the official documentation </p>"},{"location":"codespaces/#1-launch-codespace","title":"1. Launch Codespace","text":""},{"location":"codespaces/#11-codespaces-configuration","title":"1.1 Codespaces configuration","text":"<p>Branch, Machine sizing &amp; secrets</p> <ul> <li>Branch<ul> <li>select the main branch</li> </ul> </li> <li>Machine sizing<ul> <li>As a machine type select 4-core</li> </ul> </li> <li>Secrets (enter your credentials within the following variables)<ul> <li>DT_ENVIRONMENT</li> <li>DT_OPERATOR_TOKEN</li> <li>DT_INGEST_TOKEN</li> </ul> </li> </ul>"},{"location":"codespaces/#2-while-the-codespace-is-set-up-for-you-learn-powerful-usecases-for-live-debugging","title":"2. While the Codespace is set-up for you, learn powerful usecases for Live Debugging","text":"<p>We know your time is very valuable. This codespace takes around 6 minutes to be fully operational. A local Kubernetes (kind) cluster monitored by Dynatrace will be configured and in it a sample application, the TODO app will be deployed. To make your experience best, we are also installing and configuring tools like:</p> <p>k9s kubectl helm node jq python3 gh</p> <p>While the Codespace is being set up for you, here is a 6 minute read about powerful use cases beyond live debugging in our Dynatrace blog.</p> <p></p>"},{"location":"codespaces/#3-explore-what-has-been-deployed","title":"3. Explore what has been deployed","text":"<p>Your Codespace has now deployed the following resources:</p> <ul> <li> <p>A local Kubernetes (kind) cluster monitored by Dynatrace, with some pre-deployed apps   that will be used later in the demo.</p> </li> <li> <p>After a couple of minutes, you'll see this screen in your codespaces terminal. It contains the links to the local expose labguide and the UI of the TODO application which we will Live Debug. </p> </li> </ul>"},{"location":"codespaces/#4-tips-tricks","title":"4. Tips &amp; Tricks","text":"<p>We want to boost your learning and try to make your DEV experience as smooth as possible with Dynatrace trainings. Your Codespaces have a couple of convenience features added. </p>"},{"location":"codespaces/#show-the-greeting","title":"Show the greeting","text":"<p>In the terminal, there are functions loaded for your convenience. By creating a new Terminal the Greeting will be shown that includes the links to the exposed apps, the Github  pages, the Github Repository, the Dynatrace Tenant that is bound to this devcontainer and some of the tools installed.</p> <p>You can create a new Terminal directly in VSCode, type <code>zsh</code> or call the function <code>printGreeting</code> and that will print the greeting with the most relevant information.</p>"},{"location":"codespaces/#navigating-in-your-local-kubernetes","title":"Navigating in your local Kubernetes","text":"<p>The client <code>kubectl</code> and <code>k9s</code>are configured so you can navigate in your local Kubernetes like butter.  </p>"},{"location":"codespaces/#exposing-the-apps-to-the-public","title":"Exposing the apps to the public","text":"<p>The app TODO app is being exposed from the devcontainer to your localhost or the github dns domain. If you want to make the endpoints public accesible, just go to the ports section in VsCode, right click on them and change the visibility to public.</p> <p></p> Troubleshooting  If there is an issue with the application, we recommend you verify the health of the Kind cluster.   <pre><code>kubectl cluster-info\n</code></pre> The CLI Tool `k9s` is installed in your dev.container, this will help you navigate in your cluster, just type:  <pre><code>k9s\n</code></pre>  There is a helper function loaded in the shell to see the open ports in the dev.container. <pre><code>showOpenPorts(){\n  sudo netstat -tulnp\n}\n</code></pre>  The todoApp is already exposed via NodePort in the port 30100, if you want to expose it in another port like the one defined 8080 in the service, then type and to expose the TODO app, type `exposeTodoApp`,  <pre><code>exposeTodoApp(){\n  printInfo \"Exposing Todo App in your dev.container\"\n  nohup kubectl port-forward service/todoapp 8080:8080  -n todoapp --address=\"0.0.0.0\" &gt; /tmp/kubectl-port-forward.log 2&gt;&amp;1 &amp;\n}\n</code></pre> <p></p> <ul> <li>Let's start our Bug hunting quest</li> </ul>"},{"location":"getting-started/","title":"2. Getting Started","text":"<p>Requirements</p> <ul> <li>A Grail enabled Dynatrace SaaS Tenant (sign up here).</li> <li>A GitHub account to interact with the demo repository.</li> </ul>"},{"location":"getting-started/#1-dynatrace-tenant-setup","title":"1. Dynatrace Tenant Setup","text":"<p>You will need a Dynatrace SaaS tenant with a DPS pricing model and the 'Code Monitoring' rate card should be associated with it. In addition the application needs to be monitored with Dynatrace FullStack mode. The application runtime: Java, NodeJS.</p>"},{"location":"getting-started/#11-enable-observability-for-developers","title":"1.1 Enable Observability for Developers","text":"<ul> <li>Go to Settings &gt; General monitoring settings &gt; OneAgent features.<ul> <li>Enable the Java Live-Debugger, Node.js Live-Debugger, or both, depending on your needs.</li> </ul> </li> <li>Go to Settings &gt; Observability for Developers &gt; Enable Observability for Developers</li> </ul> <p>More information can be found here</p>"},{"location":"getting-started/#12-set-iam-policies","title":"1.2 Set IAM Policies","text":"<p>We take security very seriously. So let's create a policy to set user-level Live Debugging breakpoints. </p> <p>We need two policies for your user to be able to set breakpoints and to read snapshots.  For this we go to Account Management &gt; Identity &amp; Access management &gt; + Policy</p> <p>Set breakpoints <pre><code>ALLOW dev-obs:breakpoints:set;\n</code></pre> Read Snapshopts <pre><code>ALLOW storage:application.snapshots:read;\nALLOW storage:buckets:read WHERE storage:table-name = \"application.snapshots\";\n</code></pre></p> <p>For managing snapshots, setting for Admins. <pre><code>ALLOW dev-obs:breakpoints:manage;\n</code></pre></p> <p>The policy should look something like this:</p> <p></p> <p>More info here about the IAM Policies here Then we bind it to a user group. In this case since we are admins, let's bind the policy to the Admin group. Notice that the created policy is for an Admin and also for a Developer. Since we allow to <code>read</code> and <code>set</code> breakpoints but also to <code>manage</code> breakpoints which is explained here.</p> <p>Go to Group Management &gt; Select Admin Group &gt; + Permission  (and bind the policy) </p> <p>Like this you have the fine control to give your developers, SRE teams and whoever you want to set breakpoints and read the snapshots. For more granular access please continue reading here </p>"},{"location":"getting-started/#13-enable-live-debugger-activegate-module","title":"1.3 Enable Live Debugger ActiveGate module","text":"<p>Now we need to enable the Live Debugger ActiveGate module:</p> <p><pre><code>#Set debugging_enabled to true in the custom.properties file.\nactiveGate:\n    customProperties:\n      value: |\n        [debugging]\n        debugging_enabled = true\n</code></pre> This is already set up for you in the codespaces automatically in the Dynakube.yaml file so no need to restart the ActiveGate.</p> <p>Note: in newer versions of the Dynatrace Operator this is enabled on the capabilities section of the dynakube.</p> <pre><code>#Set debugging capability in the capabilities section:\n   capabilities:\n    - debugging\n</code></pre>"},{"location":"getting-started/#14-enable-log-ingest","title":"1.4 Enable Log Ingest","text":"<p>You have (2) options:</p> <ul> <li>Enable built-in log ingest rule to ingest all logs discovered by Dynatrace</li> <li>Configure log ingest rule to ingest relevant logs for this lab</li> </ul> <p>In your Dynatrace tenant, open the <code>Settings</code> App.  Navigate in the menus to <code>Collect and capture</code> &gt; <code>Log monitoring</code> &gt; <code>Log ingest rules</code>.  This will open the <code>Settings Classic</code> App and show you the Log ingest rules</p> <p></p> <p>Ingest all logs</p> <p>Locate the rule <code>[Built-in] Ingest all logs</code> and enable it.  Click <code>Save changes</code>.</p> <p>Ingest relevant logs</p> <p></p> <p>Click on <code>Add rule</code> to create a new Rule.  Configure the Rule:</p> <p>Rule name: <pre><code>TODO App Logs\n</code></pre></p> <p>Rule type: <pre><code>Include in storage\n</code></pre></p> <p>Conditions: <pre><code>Kubernetes namespace name = todoapp\n</code></pre></p> <p>Enable log/trace enrichment</p> <ul> <li>Go to Settings &gt; General monitoring settings &gt; OneAgent features.</li> <li>Enable:<ul> <li>Java - Trace/span context enrichment for logs [Opt-In].</li> <li>Java - Trace/span context enrichment for unstructured logs [Opt-In]</li> </ul> </li> </ul> <p>Click on <code>Save changes</code>.</p>"},{"location":"getting-started/#2-create-dynatrace-api-tokens-for-kubernetes-observability","title":"2. Create Dynatrace API Tokens for Kubernetes Observability","text":"<p>This codespace has everything automated for you so you can focus on what matters which in this enablement is to learn about the Live Debugging capabilities of the Dynatrace Platform.  You'll need two tokens:</p> <ol> <li>Operator Token</li> <li>Ingest Token </li> </ol> <p>We will get this two very easy from the Kubernetes App. </p>"},{"location":"getting-started/#21-get-the-operator-token-and-the-ingest-token-from-the-kubernetes-app","title":"2.1. Get the Operator Token and the Ingest Token from the Kubernetes App","text":"<ol> <li>Open the Kubernetes App (CTRL + K then type Kubernetes for fast access)</li> <li>Select the + Add cluster button</li> <li>Scroll down to the section Install Dynatrace Operator </li> <li>Click on generate Token for the 'Dynatrace Operator' and save it to your Notepad</li> <li>Click on generate Token for the 'Data Ingest Token' and save it to your Notepad</li> <li>You can close the Kubernetes App, we don't need it, we just needed the tokens.</li> </ol> <p>Let's launch the Codespace</p> <p>Now we are ready to launch the Codespace! You'll need your tenant and the two tokens previuosly gathered from above. When you enter the tenant please enter it without the 'apps' part, for production tenants eg. abc123 for live -&gt; https://abc123.live.dynatrace.com and for sprint -&gt; https://abc123.sprint.dynatracelabs.com no apps in the URL.</p> <ul> <li>Let's launch Codespaces</li> </ul>"},{"location":"grail-and-dql/","title":"Grail and dql","text":"WIP Version control <p>This section is under construction</p> <ul> <li>Click here to continue </li> </ul>"},{"location":"ide-integration/","title":"IDE Integration","text":"<p>\ud83e\uddd1\u200d\ud83d\udcbb IDE Integration</p> <p>We love Developers and the developer's experience, we understand that for better and faster Software development a developer does not leave it's IDE. We support JetBrains and VSCode as one of the most common IDE's out there. Here you can read more about the extensions.</p>"},{"location":"ide-integration/#launch-the-ide-from-your-browser","title":"Launch the IDE from your Browser","text":"<p>On the top left, click on the VS Code menu (the 3 lines), and then click on \"Open in VS Code Desktop\". This will launch your local VS Code IDE. If you don't have VS Code already installed in your computer, you can download and install it directly from here: https://code.visualstudio.com/</p> <p></p> <p>Download VS Code</p>"},{"location":"ide-integration/#codespaces-experience-in-your-ide","title":"Codespaces experience in your IDE","text":"<p>Now your Codespace is open inside your VS Code IDE. You'll notice that you have now the full IDE experience, you can drag and drop files inside and outside the IDE from your OS and VSCode will automatically add them in the container that is being managed by your codespace. </p> <p>The application is now being exposed and mapped to your localhost. In this case the TODO app is being mapped to port 30100, so you will be able to access it like this: http://127.0.0.1:30100</p>"},{"location":"ide-integration/#get-the-dynatrace-extension","title":"Get the Dynatrace extension","text":"<p>On the left pane, click on \"Extensions\", then search for \"Dynatrace\" &gt; Select \"Observability for Developers\" and click on \"Install in Codespaces\"</p> <p></p>"},{"location":"ide-integration/#select-the-stage-you-want-to-connect","title":"Select the stage you want to connect","text":"<p>Great! now that you have the Dynatrace extension installed in your IDE. Unless you are using a DEV or Hardening (sprint) tenant, this configuration is not needed since th default is \"production\". All our Free Trials and customers run in production environments.  If you are using a DEV or sprint tenant, here is how to configure it. Inside the extension, click on the \"settings wheel\" &gt; select \"Settings\" and click on it.</p> <p></p> <p>The extension settings will open. You can select the environment you want to connect. As options you'll get:</p> <ol> <li>development  </li> <li>sprint       </li> <li>production (default)</li> </ol> <p>Select the desired environment and that's it. You can select it for the User, Remote CS instance and for the Workspace.</p> <p></p>"},{"location":"ide-integration/#login-to-dynatrace-sso","title":"Login to Dynatrace SSO","text":"<p>Now let's login to the environment using SSO. On the bottom pane, there is a tab called \"Dynatrace Snapshots\", open it.  Click on the button \"Log in\".</p> <p>This will open a browser and will pass on the SSO credentials to your IDE via http://localhost:3232. When the browser tab opens, enter your credentials, login and accept the pop up to connect back to VS Code. </p> Loggin in keeps loading... and how to fix it <p>If after you enter your login credentials in the browser, the extensions keeps on loading, just restart the extension so it can authenticate properly. Passing in the credentials from the Browser to the Dynatrace Extension that is running in VS Code inside a container, might fail and needs a refresh so it loads properly. </p> <p>Just type [Ctrl]+[Shift] + P : Developer: Restart Extension Host </p>"},{"location":"ide-integration/#select-the-tenant","title":"Select the tenant \u2601\ufe0f","text":"<p>Since we are using the comfort of SSO, you can select any tenant you have permission on the logged in production or whatever environment you previously selected. For selecting a specific tenant click on the \u2601\ufe0f cloud icon in the Dynatrace Snapshots tab, and the tenants you have permissions will appear in a drop down.</p>"},{"location":"ide-integration/#select-a-running-container","title":"Select a running container \u270f\ufe0f","text":"<p>You'll need to specify the instances you want to capture non-breaking break points, for this click on the \u270f\ufe0f pencil icon in the Dynatrace Snapshots tab and the <code>Dynatrace: Instance selection</code> tab will open. Select the pod <code>todoapp-deploymentHashId-podHashID</code> &gt; in th properties filter by <code>k8s.workload.name:todoapp</code>. THis way when the pod gets restarted or in a new deployment, the filter will still apply to it. You can add more filters like <code>k8s.namespace.name</code> or alike for filtering by namespace or cluster in big environments.</p>"},{"location":"ide-integration/#set-a-non-breaking-breakpoint","title":"Set a non-breaking breakpoint","text":"<p>Now open the <code>TodoController.java</code> Class. Once opened, on the left side of the Class, where the line numbers appear, click on the Line you would like to set a breakpoint. For example let's put a breakpoint inside the method <code>addTodo</code>in the line 25. Right click on the line number, and select Add Live Debugging breakpoint. You'll notice after you set the breakpoint, on the left pane (when the extension is selected) you'll have three sections: </p> <p></p> Pane Description <code>LIVE DEBUGGING BREAKPOINTS</code> All active breakpoints for your session with Class and line number <code>BREAKPOINT STATUS</code> the status of the breakpoints and the instances that match the breakpoint <code>BREAKPOINT EDITOR</code> By selecting the Breakpoint in <code>LIVE DEBUGGING BREAKPOINTS</code> you'll be able to set the settings for the breakpoint, such as <code>Log message</code>, <code>Conditions</code> and <code>Limits</code> <ul> <li>Click here to continue </li> </ul>"},{"location":"mask-data/","title":"Mask Sensitive Data","text":""},{"location":"mask-data/#data-masking","title":"Data masking","text":"<p>Dynatrace provides you with tools that enable you to meet your data protection and other compliance requirements while still getting value from any data collected by Dynatrace, including the Live Debugger. </p> <p>Sensitive Data is never sent to the Dynatrace servers</p> <p>Data maksing within the Live Debugger is done on the OneAgent, which means that no personal data will be sent or stored on Dynatrace servers.</p>"},{"location":"mask-data/#data-masking-settings","title":"Data masking settings","text":"Setting Description <code>Rule name</code> A name to identify the masking rule <code>Rule Active and Order</code> You can activate and deactivate a rules on the fly. You can also move a rule up and down among other rules, meaning the first rule that matches the filter will be the one that is effective. <code>Rule type</code> 1. Redact by variable name: Redact the value of all variables that match a name. The entire value will be masked.  2. Redact by regex: Redact any values that match the regex you supply <code>Data replacement</code> 1. Replace with string: Optionally choose a string to replace the data being masked. The default value is ***  2. Replace with SHA-256: Redacted data will be replaced with a SHA-256 hash string."},{"location":"mask-data/#lets-appy-a-data-masking-rule-to-the-title-variable","title":"Let's appy a data masking rule to the \"title\" variable","text":"<p>In your Dynatrace tenant go to:</p> <ol> <li>Settings &gt; Observability for Developers &gt; Sensitive data masking</li> <li>Click on \"Add rule\" and give it a name, e.g. <code>Title is masked</code></li> <li>Rule type we select \"Redact by variable name\" and enter \"title\"</li> <li>Data replacement we select \"Replace with string\" and leave the default value ***</li> <li>Save the rule.</li> </ol> <p>The Masking Rules are applied on the fly \ud83d\ude80</p> <p>The masking rules are applied on the fly to all connected processes or containers where they have the Live Debugger active and match a filter for setting non-breaking breakpoints! No restart is required. How awesome is that!?!</p> <p>The rule should look something like this:</p> <p></p>"},{"location":"mask-data/#verify-that-the-title-is-being-masked","title":"Verify that the \"title\" is being masked","text":"<p>Once you have applied the masking rule, open the \"Todo app\" and add a new task, or remove it, depending the Method where you have the Live Debbugging breakpoint.</p> <p>In the following example we have the Live Breakpoint in the line 32 of the <code>TodoController.java</code> class. This corresponds the method <code>addTodo</code>. The Class <code>TodoRecord</code> contains a private variable called <code>title</code>. This variable will be masked with the simple rule we have active. </p> <p></p> <p>But if you can see there is another variable, a temporary variable called <code>todoTitle</code>. Since this variable does not match the rule with the exact variable name <code>title</code> then it won't be masked. </p> <p>In the snapshot you can see, that all variables that match the rule will be masked, not the <code>todoTitle</code>. </p> <p>Dynatrace gives Developers the flexibility to mask and capture variables with simple rules as well with complex rules using regex. Give it a try!</p> <ul> <li>Click here to continue </li> </ul>"},{"location":"resources/","title":"9. Resources","text":""},{"location":"resources/#get-your-dynatrace-environment","title":"Get your Dynatrace environment","text":"<ul> <li>Create a Free Trial in Dynatrace</li> </ul>"},{"location":"resources/#documentation","title":"Documentation","text":"<ul> <li>Dynatrace documentation - Developer Observability</li> </ul>"},{"location":"resources/#blog-posts","title":"Blog posts","text":"<ul> <li> <p>5 Powerful Usecases beyond debugging for Dynatrace Live Debugger</p> </li> <li> <p>Dare to debug production with Dynatrace live debugger</p> </li> <li> <p>Debug complex performance issues in production</p> </li> <li> <p>Dynatrace Observability for Developers saves time with real-time data</p> </li> </ul>"},{"location":"resources/#live-debugger-plugins-dont-leave-your-ide-to-hunt-production-bugs","title":"Live Debugger Plugins, don't leave your IDE to Hunt production bugs","text":"<ul> <li> <p>VSCode Plugin</p> </li> <li> <p>Jetbrains Plugin</p> </li> </ul> <ul> <li>What's Next? </li> </ul>"},{"location":"scratch/","title":"Scratch","text":"<p>.ConnectTimeoutException: Connect to sg-eu-west-1-54-77-175-7-acceptancee2e-euwest.sprint.dynatracelabs.com:443 [sg-eu-west-1-54-77-175-7-acceptancee2e-euwest.sprint.dynatracelabs.com/54.77.175.7] endpoint='https://10.96.0.1:443', </p> <p>activegate 2025-04-07 12:47:18 UTC DEBUG   [] [, LogStatisticsWriter] Stats for the last: 600 seconds. Local time: 2025-04-07 12:47:18 GMT. Threads: 645. Active agents: 2. Memory usage in kB: free memory: 30,924; heap: 116,736; max heap: 524,288; direct byte buffers: 871.                                                                   activegate Message Statistics:                                                                                                                                                                                                                                                                                                                                               activegate  AGENT_INCOMING:                 779; Errors:   0; Size:  844.6 KiB;  AGENT_OUTGOING:                 328; Errors:   0; Timeouts:   0; Size:   20.8 KiB;                                                                                                                                                                                                          activegate  ANY_SERVER_INCOMING:             50; Errors:   0; Size:   28.8 KiB;  ANY_SERVER_OUTGOING:             50; Errors:   0; Timeouts:   0; Size:    4.3 KiB;                                                                                                                                                                                                          activegate  SERVER_INCOMING:                730; Errors:   0; Size:   40.3 KiB;  SERVER_OUTGOING:               3640; Errors:   0; Timeouts:   0; Size:    3.3 MiB;                                                                                                                                                                                                          activegate Network statistics:                                                                                                                                                                                                                                                                                                                                               activegate  outgoingHttpErrors: 24;  incomingHttpErrors: 0                                                                                                                                                                                                                                                                                                                   activegate Queue length: server Id: 3; OneWay: 53; Request: 0server Id: 4; OneWay: 55; Request: 1server Id: 6; OneWay: 51; Request: 0. Selfmonitoring: enabled: true; metrics sent: 2574.                                                                                                                                                                                    activegate 2025-04-07 12:57:18 UTC DEBUG   [] [, LogStatisticsWriter] Stats for the last: 600 seconds. Local time: 2025-04-07 12:57:18 GMT. Threads: 645. Active agents: 2. Memory usage in kB: free memory: 41,852; heap: 119,808; max heap: 524,288; direct byte buffers: 1,298.                                                                 activegate Message Statistics:                                                                                                                                                                                                                                                                                                                                               activegate  AGENT_INCOMING:                1494; Errors:   0; Size:    1.9 MiB;  AGENT_OUTGOING:                 600; Errors:   0; Timeouts:   0; Size:   36.8 KiB;                                                                                                                                                                                                          activegate  ANY_SERVER_INCOMING:             50; Errors:   0; Size:   13.8 KiB;  ANY_SERVER_OUTGOING:             50; Errors:   0; Timeouts:   0; Size:    3.3 KiB;                                                                                                                                                                                                          activegate  SERVER_INCOMING:               1049; Errors:   0; Size:   56.3 KiB;  SERVER_OUTGOING:               4697; Errors:   0; Timeouts:   0; Size:    4.7 MiB;                                                                                                                                                                                                          activegate Network statistics:                                                                                                                                                                                                                                                                                                                                               activegate  outgoingHttpErrors: 0;  incomingHttpErrors: 0                                                                                                                                                                                                                                                                                                                    activegate Queue length: server Id: 3; OneWay: 53; Request: 0server Id: 4; OneWay: 55; Request: 1server Id: 6; OneWay: 51; Request: 0. Selfmonitoring: enabled: true; metrics sent: 5368.                                                                                                                                                                                    activegate 2025-04-07 12:59:54 UTC INFO    [] [, MessageBroker] First-chance exception org.apache.http.conn.ConnectTimeoutException: Connect to sg-eu-west-1-54-77-175-7-acceptancee2e-euwest.sprint.dynatracelabs.com:443 [sg-eu-west-1-54-77-175-7-acceptancee2e-euwest.sprint.dynatracelabs.com/54.77.175.7] failed: Connect timed out on http req uest to URI 'https://sg-eu-west-1-54-77-175-7-acceptancee2e-euwest.sprint.dynatracelabs.com/communication', proxy: no proxy [Suppressing further messages for 10 minutes] [skipped logs: 10]                                                                                                                                                                                 activegate 2025-04-07 13:07:18 UTC DEBUG   [] [, LogStatisticsWriter] Stats for the last: 600 seconds. Local time: 2025-04-07 13:07:18 GMT. Threads: 645. Active agents: 2. Memory usage in kB: free memory: 52,378; heap: 119,808; max heap: 524,288; direct byte buffers: 1,670.                                                                 activegate Message Statistics:                                                                                                                                                                                                                                                                                                                                               activegate  AGENT_INCOMING:                1494; Errors:   0; Size:    1.9 MiB;  AGENT_OUTGOING:                 600; Errors:   0; Timeouts:   0; Size:   36.8 KiB;                                                                                                                                                                                                          activegate  ANY_SERVER_INCOMING:             50; Errors:   0; Size:   21.0 KiB;  ANY_SERVER_OUTGOING:             50; Errors:   0; Timeouts:   0; Size:    3.3 KiB;                                                                                                                                                                                                          activegate  SERVER_INCOMING:               1049; Errors:   0; Size:   56.3 KiB;  SERVER_OUTGOING:               4693; Errors:   0; Timeouts:   0; Size:    4.7 MiB;                                                                                                                                                                                                          activegate Network statistics:                                                                                                                                                                                                                                                                                                                                               activegate  outgoingHttpErrors: 5;  incomingHttpErrors: 0                                                                                                                                                                                                                                                                                                                    activegate Queue length: server Id: 3; OneWay: 51; Request: 0server Id: 4; OneWay: 55; Request: 1server Id: 6; OneWay: 51; Request: 0. Selfmonitoring: enabled: true; metrics sent: 8156.                                                                                                                                                                                    activegate 2025-04-07 13:09:41 UTC INFO    [] [DalWatchClientAdapter] Watching for changes (/api/v1/events) timed out. Will reconnect with resourceVersion='3475': java.net.SocketTimeoutException: Read timed out [Suppressing further messages for 30 minutes] [skipped logs: 26]                                                                                activegate 2025-04-07 13:15:32 UTC WARNING [] [ListWatchController] An error occurred in state WATCH. Will transition to next state in order to avoid data loss: configurationId='3814973623141514629', endpoint='https://10.96.0.1:443', resource='/api/v1/events' [Suppressing further messages for 30 minutes] [skipped logs: 2]                                activegate com.dynatrace.apiconnector.pipeline.stage.StageExecutionException: Error watch event received, stopping watch (The resourceVersion for the provided watch is too old.)                                                                                                                                                                                            activegate     at com.dynatrace.apiconnector.k8s.dataaccess.DalWatchClientAdapter.handleNonLifecycleType(DalWatchClientAdapter.java:203)                                                                                                                                                                                                                                     activegate     at com.dynatrace.apiconnector.k8s.dataaccess.DalWatchClientAdapter.watch(DalWatchClientAdapter.java:138)                                                                                                                                                                                                                                                      activegate     at com.dynatrace.apiconnector.k8s.informer.ListWatchController.executeCurrentState(ListWatchController.java:157)                                                                                                                                                                                                                                              activegate     at com.dynatrace.apiconnector.k8s.informer.ListWatchController.evaluateState(ListWatchController.java:135)                                                                                                                                                                                                                                                    activegate     at com.dynatrace.apiconnector.k8s.informer.ListWatchController.run(ListWatchController.java:127)                                                                                                                                                                                                                                                              activegate     at com.dynatrace.gen2.foundation.util.concurrency.api.LatchRunnable.run(LatchRunnable.java:34)                                                                                                                                                                                                                                                                activegate     at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)                                                                                                                                                                                                                                                                                activegate     at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)                                                                                                                                                                                                                                                                               activegate     at java.base/java.lang.Thread.run(Unknown Source)                                                                                                                                                                                                                                                                                                             activegate                                                                                                                                                                                                                                                                                                                                                                   activegate 2025-04-07 13:17:18 UTC DEBUG   [] [, LogStatisticsWriter] Stats for the last: 600 seconds. Local time: 2025-04-07 13:17:18 GMT. Threads: 645. Active agents: 2. Memory usage in kB: free memory: 30,470; heap: 119,808; max heap: 524,288; direct byte buffers: 2,004.                                                                 activegate Message Statistics:                                                                                                                                                                                                                                                                                                                                               activegate  AGENT_INCOMING:                1494; Errors:   0; Size:    1.8 MiB;  AGENT_OUTGOING:                 600; Errors:   0; Timeouts:   0; Size:   36.8 KiB;                                                                                                                                                                                                          activegate  ANY_SERVER_INCOMING:             50; Errors:   0; Size:   21.0 KiB;  ANY_SERVER_OUTGOING:             50; Errors:   0; Timeouts:   0; Size:    3.3 KiB;                                                                                                                                                                                                          activegate  SERVER_INCOMING:               1049; Errors:   0; Size:   56.3 KiB;  SERVER_OUTGOING:               4693; Errors:   0; Timeouts:   0; Size:    4.6 MiB;                                                                                                                                                                                                          activegate Network statistics:                                                                                                                                                                                                                                                                                                                                               activegate  outgoingHttpErrors: 0;  incomingHttpErrors: 0                                                                                                                                                                                                                                                                                                                    activegate Queue length: server Id: 3; OneWay: 54; Request: 0server Id: 4; OneWay: 55; Request: 1server Id: 6; OneWay: 51; Request: 0. Selfmonitoring: enabled: true; metrics sent: 10949.    <p>bash-4.4$ curl -k -v https://10.96.0.1:443 * Rebuilt URL to: https://10.96.0.1:443/ *   Trying 10.96.0.1... * TCP_NODELAY set * Connected to 10.96.0.1 (10.96.0.1) port 443 (#0) * ALPN, offering h2 * ALPN, offering http/1.1 * successfully set certificate verify locations: *   CAfile: /etc/pki/tls/certs/ca-bundle.crt   CApath: none * TLSv1.3 (OUT), TLS handshake, Client hello (1): * TLSv1.3 (IN), TLS handshake, Server hello (2): &lt;  * TLSv1.3 (IN), TLS app data, [no content] (0): {   \"kind\": \"Status\",   \"apiVersion\": \"v1\",   \"metadata\": {},   \"status\": \"Failure\",   \"message\": \"forbidden: User \\\"system:anonymous\\\" cannot get path \\\"/\\\"\",   \"reason\": \"Forbidden\",   \"details\": {},   \"code\": 403 * Closing connection 0 * TLSv1.3 (OUT), TLS alert, [no content] (0): * TLSv1.3 (OUT), TLS alert, close notify (256):</p> <p>X change path to 'app' - AG issues? Keep an eye - Startup, timer needed for AG? - On LD says 3 active instances... why? - change image of IAM policies - modify the Makefile of the app, make it cleaner - Do build and push to own repo - Expose port 8080 always - map ingress to all * on app to port 8080 for having nigx RUM instrumentation</p>"},{"location":"version-control/","title":"Version Control","text":"<p>Automate the Version Control integration for all your environments</p> <p>With environment variables it's easy to point each deployed application in every stage and kubernetes cluster to the right vesion control, branch and commit.</p>"},{"location":"version-control/#integrate-with-your-version-control","title":"Integrate with your version control","text":"<p>When debugging within a remote environment, you need to know exactly what source code it is executing. The Live Debugger integrates with your source control provider to fetch the correct source code for every environment, wheter is development, staging or production environment. Using environment variables within your CI/CD processes, makes it easy and accurate to point to the specific commit, branch and version control for each deployed application. </p> ENV Variable Description <code>DT_LIVEDEBUGGER_COMMIT</code> String that indicates your git commit <code>DT_LIVEDEBUGGER_REMOTE_ORIGIN</code> String that indicates your git remote origin. For multiple sources, use the environment variable DT_LIVEDEBUGGER_SOURCES to  initialize the SDK with information about the sources used in your application. <code>DT_LIVEDEBUGGER_SOURCES</code> is a semicolon-separated list of source control repository and revision information, joined by #. For example:  DT_LIVEDEBUGGER_SOURCES=https://github.com/myorg/MyRepo#abc123;https://github.com/otherorg/OtherRepo#xyz789. <p>More information in the official documentation page.</p>"},{"location":"version-control/#lets-automate-the-version-control-integration","title":"Let's automate the version control integration","text":"<p>We recommend to automate the version control integration within the build and deployment process of the applications. This way, when a developer debugs an application in whatever cluster and environment he see's fit, he does not need to manually add nor verify the origins repository, branch and revision that corresponds to the built application. </p>"},{"location":"version-control/#fetching-the-version-control-information-automatically","title":"Fetching the version control information automatically","text":"<p>Below is a sample bash script that patches the Kubernetes deployment of the todo application. It'll read the revision for v1.0.0 and the remote URL of the repository and set them accordingly as environment variables in the specific container of the deployment.</p> <p>/app/patches/set_version_control.sh</p> set_version_control.sh<pre><code>#!/bin/bash\n\n# Small bash script for patching deployments via kubectl, more information about integrating the live debugger with your version control see: \n# https://docs.dynatrace.com/docs/observe/applications-and-microservices/developer-observability/offering-capabilities/additional-settings#integrate-with-your-version-control\n\n# Variable definition\nversion=\"v1.0.0\"\ndeployment=\"todoapp\"\ncontainer=\"todoapp\"\nnamespace=\"todoapp\"\n\nDT_LIVEDEBUGGER_COMMIT=\"\"\nDT_LIVEDEBUGGER_REMOTE_ORIGIN=\"\"\n\n\nset_version_control_information(){\n    DT_LIVEDEBUGGER_REMOTE_ORIGIN=$(git remote get-url origin)\n    DT_LIVEDEBUGGER_COMMIT=$(git rev-parse $version)\n\n    echo \"Fetching git revision for $version in $DT_LIVEDEBUGGER_REMOTE_ORIGIN\" \n    echo $DT_LIVEDEBUGGER_COMMIT\n\n    export DT_LIVEDEBUGGER_REMOTE_ORIGIN=$DT_LIVEDEBUGGER_REMOTE_ORIGIN\n    export DT_LIVEDEBUGGER_COMMIT=$DT_LIVEDEBUGGER_COMMIT\n}\n\n\npatch_deployment(){ \nkubectl patch deployment $deployment -n $namespace -p \"$(cat &lt;&lt;EOF\n{\n    \"spec\": {\n        \"template\": {\n            \"spec\": {\n                \"containers\": [\n                    {\n                        \"name\": \"$container\",\n                        \"env\": [\n                            {\n                                \"name\": \"DT_LIVEDEBUGGER_COMMIT\",\n                                \"value\": \"$DT_LIVEDEBUGGER_COMMIT\"\n                            },\n                            {\n                                \"name\": \"DT_LIVEDEBUGGER_REMOTE_ORIGIN\",\n                                \"value\": \"$DT_LIVEDEBUGGER_REMOTE_ORIGIN\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}\nEOF\n)\"\n}\n\nset_version_control_information\npatch_deployment\n</code></pre>"},{"location":"version-control/#patch-the-kubernetes-deployment","title":"Patch the Kubernetes deployment","text":"Patch the kubernetes deployment in Codespaces by executing the following script:<pre><code>bash app/patches/set_version_control.sh\n</code></pre>"},{"location":"version-control/#verify-that-the-container-has-the-version-control-information","title":"Verify that the container has the version control information","text":"<p>We can easily verify that the pod has the environment variables set. With the help of k9s we can easily navigate and describe the deployment.</p> <ul> <li>Type <code>k9s</code></li> <li>Inside k9s type (semicolon) <code>:</code> then <code>deployment</code>, then <code>0</code> to list all deployments in all namespaces.</li> </ul> <p></p> <ul> <li>Now select <code>todoapp</code> and type <code>d</code> to Describe the deployment, you should see something like this:</li> </ul> <p></p> <p>The DT_LIVEDEBUGGER_COMMIT and DT_LIVEDEBUGGER_REMOTE_ORIGIN environment variables are setted accordingly.</p>"},{"location":"version-control/#open-the-live-debugger-and-verify-that-the-version-control-is-setted-automatically","title":"Open the Live Debugger and verify that the Version Control is setted automatically","text":"<ul> <li>Go to Dynatrace and open the Live Debugger.</li> <li>In case you have an old session, click on \"New Session\" </li> <li>Select the \"todoapp\" container and verify that the hash matches the actual POD that has been re-deployed after the patch. </li> <li>After you click on \"Next\" the repository should be fetched automatically like the following screenshot matching the remote URL and the revision ID.</li> </ul> <p>And that's it! as easy as adding those environment variables you can automate the version control integration of the deployed applications in any environment. </p> <ul> <li>Click here to continue </li> </ul>"},{"location":"whats-next/","title":"10. What's Next?","text":"<p>Help shape our next content \u2014 we\u2019d love your feedback \ud83d\udce3</p> <p>We're always working to improve and make our content more useful and relevant to you. If you have a few minutes, we\u2019d really appreciate your input:</p> <ul> <li>Take 4 minutes to complete our feedback form </li> <li>Or open an issue to share suggestions, topics you'd like us to cover, or examples you'd find helpful.</li> </ul> <p>Your feedback directly shapes what we build next. If there's strong interest in a topic, we\u2019ll prioritize detailed guides, practical examples, and hands-on walkthroughs.</p> <p>Thank you for helping us create better enablement resources for everyone \u2764\ufe0f</p> <p>More to come</p> <ul> <li>Stay tuned, more enablements are coming whith more advanced usecases, where we can:<ul> <li>hunt bugs from Real User monitoring</li> <li>watch variables in deep nested in objects</li> <li>use the Live Debugger plugin so you never leave your IDE</li> <li>fix code on the fly and verify that the bugs are gone </li> </ul> </li> </ul>"},{"location":"snippets/admonitions/","title":"Admonitions","text":"<p>Warning</p> <p>This is a Warning </p> <p>Note</p> <p>This is a Note </p> <p>Important</p> <p>This is important </p> <p>Tipp</p> <p>This is a tipp </p>"},{"location":"snippets/disclaimer/","title":"Disclaimer","text":"<p>Support Policy</p> <p>This is an enablement project created by the Center of Excellence - Enablement Team at Dynatrace.</p> <p>Support is provided via GitHub issues only. The materials provided in this repository are offered \"as-is\" without any warranties, express or implied. Use them at your own risk.</p>"},{"location":"snippets/dt-enablement/","title":"Dt enablement","text":"<p>This Codespace leverages the Dynatrace Enablement Framework, providing a robust and flexible development environment. Key features include:</p> <ul> <li>Seamless operation within GitHub Codespaces, as a remote container, or locally via Docker.</li> <li>Cross-compilation support for both AMD and ARM architectures, ensuring broad compatibility.</li> <li>Adherence to industry standards and best practices to optimize the developer experience.</li> <li>Real-time observability of Kubernetes clusters using Dynatrace Full-Stack monitoring.</li> <li>Integrated Dynatrace MCP Server to deliver deep, actionable insights across distributed systems.</li> </ul> <p>To learn more about the Dynatrace Enablement Framework and how it can enhance your development workflow, please refer to the official documentation </p>"},{"location":"snippets/feedback/","title":"Feedback","text":"<p>Help shape our next content \u2014 we\u2019d love your feedback \ud83d\udce3</p> <p>We're always working to improve and make our content more useful and relevant to you. If you have a few minutes, we\u2019d really appreciate your input:</p> <ul> <li>Take 4 minutes to complete our feedback form </li> <li>Or open an issue to share suggestions, topics you'd like us to cover, or examples you'd find helpful.</li> </ul> <p>Your feedback directly shapes what we build next. If there's strong interest in a topic, we\u2019ll prioritize detailed guides, practical examples, and hands-on walkthroughs.</p> <p>Thank you for helping us create better enablement resources for everyone \u2764\ufe0f</p>"},{"location":"snippets/grail-requirements/","title":"Grail requirements","text":"<p>Requirements</p> <ul> <li>A Grail enabled Dynatrace SaaS Tenant (sign up here).</li> <li>A GitHub account to interact with the demo repository.</li> </ul>"},{"location":"snippets/view-code/","title":"View code","text":"<p>View the Code</p> <p>The code for this repository is hosted on GitHub. Click the \"View Code on GitHub\" link above.</p>"}]}