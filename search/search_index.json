{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Live Debugger Tutorial - Bug Hunting the TODO App","text":"<p>Support Policy</p> <p>This is an enablement project created by the Center of Excellence - Enablement Team at Dynatrace.</p> <p>Support is provided via GitHub issues only. The materials provided in this repository are offered \"as-is\" without any warranties, express or implied. Use them at your own risk.</p>"},{"location":"#whats-this-tutorial-all-about","title":"What's this tutorial all about","text":"<p>In this tutorial we will embark a Bug Hunting journey learning the different features of the Live Debbuging Capabilities of the Dynatrace Plattform.</p> <p>The Live Debugger is a solution within the package of Observability for Developers of the Dynatrace Platform which provides developers with instant access to code-level debug data needed to troubleshoot and understand complex, modern applications with no extra coding, redeployments, or restarts.</p> <ul> <li>Debug in any environment or application and run with any architecture</li> <li>Instant insights and data from any issue</li> <li>Full visibility into code</li> <li>Instantly debug complex workflows</li> <li>Built for hybrid cloud architectures and large-scale deployments</li> <li>Robust security and data privacy controls</li> <li>Increase developer satisfaction &amp; happiness (remove frustrations)</li> </ul> <p>Are you ready to start the Bug hunting journey and ready to learn how to improve and empower the Developers Productivity? </p> <p>What will we do</p> <p>In this tutorial we will learn how easy it is to live debug an application in a Kubernetes Cluster. This is a TODO application which should help us be more effective but unfortunately it has bugs. So let' find them so we can be more productive and effective!</p> <ul> <li>Yes! let's begin </li> </ul>"},{"location":"bug-clear-completed/","title":"The Bug \"Clear Completed\"","text":"<p>The Bug 'Clear Completed'</p> <pre><code>Level: Beginner\n</code></pre>"},{"location":"bug-clear-completed/#open-the-todo-app-and-add-a-couple-of-tasks","title":"Open the TODO App and add a couple of tasks","text":"<p>In VSCode open a new terminal and in the Welcome Message you should see a link to the Todo App UI. Click on it. Now add a couple of tasks. It should look something like this: </p> <ul> <li>Add a couple of tasks. </li> <li>Complete some of them (or all, depending how productive you are ;) . </li> <li>Now click on: <code>Clear Completed</code> </li> </ul> <p></p> <ul> <li>Are the tasks cleared?</li> </ul> <p>Apparently the button does not work. When clicked - completed todos are not cleared. </p> <p>We embark our Bug hunting journey! </p> <p>There are multiple ways how dive deep into the issue because Dynatrace is monitoring your Kubernetes cluster, all workloads in it, all it's traces with code level insights and all real users accessing the exposed application.</p>"},{"location":"bug-clear-completed/#hunting-via-the-kubernetes-road","title":"Hunting via the Kubernetes Road","text":"<ul> <li>Open the Kubernetes App &gt; You'll see a cluster with the name \"codespace-xxxx\". That's your Kind cluster being FullStack monitored.</li> </ul> <ul> <li> <p>On the right hand side, click on Workloads, the Workloads Page will open. </p> </li> <li> <p>Select the <code>todoapp</code>workload. </p> </li> </ul> <p></p> <ul> <li>On the Overview in the right hand side, scroll down and open the Services App. (this are the traces grouped withing Dynatrace Services)</li> </ul> <p></p> <ul> <li>Click on the Spring Boot one and then on the right corner \"View Traces\"</li> </ul> <p></p> <ul> <li>This will open all the traces that went through your application... wow!</li> </ul> <p>As you can see, there are traces with the name \"clearCompletedTodos\" that just took a couple ms and are not throwing any errors. The response code is 200, but since this is a bug it does not mean the application is working as expected.</p> <p>This specific span it was just 2.98ms. On the right hand side, you can see the Tracing details, look how much data was captured automatically \ud83e\udd29.</p> <p></p> <p>In the second node of the span, in the Code Attributes section, we can see the <code>Code function: clearCompletedTodos</code> and the <code>Code Namespace: com.dynatrace.todoapp.TodoController</code> </p> <p>Now we know which method and which package! Let's put our Developer Hat \ud83c\udfa9 and open the Live Debugger.</p>"},{"location":"bug-clear-completed/#open-live-debugger","title":"Open Live Debugger","text":"<p>Type CTRL + K &gt; Live Debugger for super fast access to the Live Debugger application. </p> <p>In \"Customize your debug session\" we add the filters <code>namespace:todoapp</code> <code>k8s.workload.name:todoapp</code>. This information was also available in the trace that we just took a look at. There are multiple filters you can add, important here is to have a filter that can be reused and is not specifc to an instance in case the pods a recycled and you want to make sure you are always setting breakpoints to a specific workload in a specific cluster (or multiple)</p> <p></p>"},{"location":"bug-clear-completed/#connect-the-github-repository-manually","title":"Connect the Github repository (manually)","text":"<p>Once you click next, no repository was found for this application (this is because no repo was configured). Let's add it manually.</p> <ul> <li> <p>Click on the + sign to add a new one </p> </li> <li> <p>Click on authenticate. It'll open a window where you'll authenticate with your GitHub personal account.</p> </li> </ul> <p>Why? we take security very seriously, meaning the source code will never leave the browser, the client. </p> <ul> <li>In organisation you enter: <code>dynatrace-wwse</code></li> <li>In Repository you enter this repo: <code>enablement-live-debugger-bug-hunting</code></li> </ul> <p></p> <ul> <li>Click on Done!</li> </ul> <p>Now you are all set! you should see an  image like this:</p> <p></p>"},{"location":"bug-clear-completed/#navigate-to-the-todocontrollerjava","title":"Navigate to the TodoController.java","text":"<p>You have multiple ways to open the TodoController.java. Let's say you know the code, then easily you'll navigate to it by opening the Source Code menu on the left pane, navigate to: <code>src &gt; main &gt; java &gt; com &gt; dynatrace &gt; todoapp &gt; TodoController.java</code></p> <p>if you don't know the structure, use the search and type <code>TodoController</code>it'll search for all matches, you'll see the Class file so you can open it.</p> <p></p> <p>Now let's search for the Method <code>clearCompletedTodos</code>. You'll find it around line 72. Set up a non-breaking-breakpoint on the return code.</p> <p>Go back to the TODO app and clear again on \"Clear completed\"</p> <p>Return to the Live Debugger and see the Snaphot captured, open it and see all the variables that were captured with their values.</p> <p>Do you see the bug? can you understand what happened and why the completed todos are not deleted? We can see two variables, the <code>todos</code> with a lenght of 3 and <code>todoStore</code> with a lenght of 0.</p> <p>In line 84 <code>todoStore.remove(todoRecord)</code> the variable todoStore is a newly instantiated variable. This is a mistake, it should be replaced by the variable <code>todos</code> so the function can succesfully remove all cleared tasks!</p> <p>Yay! we found the first bug!!!</p> <p></p> <p>Seeing is believing \ud83e\udd29</p> <p>Did you notice? With Dynatrace we were able to navigate from the Kubernetes Cluster all the way down to the workload, it's traces cotinuing down to the specific method and namespace of the called function and variables. With one click on the method we were able to set a non-breaking breakpoint in our production application deployed in a Kubernetes Cluster where with a single snapshot we were able to identify the bug. Debugging Kubernetes Clusters has never been so easy!!! And in Production!! \ud83e\udd2f</p> <ul> <li>Click Here to Continue </li> </ul>"},{"location":"bughunt/","title":"4. Bug Hunting","text":"<p>WIP</p> <p>Bug Scenarios, 1 checked!</p>"},{"location":"bughunt/#bug-scenarios","title":"Bug scenarios","text":"<p>Level: Beginner - __The bug: Special characters (&lt;,&gt;,;,<code>,&amp;,/,\\\\) are not being accepted as part of the title when Adding or Updating a Todo.__     - **Reproduce:** Add a todo with special characters. All of these characters should disappear.     - **Debug:**         1. In the Rookout app, open the file</code>src/main/java/com/rookout/tutorial/TodoController.java<code>2. In the addTodo function you will we see that the todo title is being filtered by</code>replaceAll<code>with a regex - Let's add a</code>Dump Frame<code>to the line after it         ![newTodoRecord](/img/screenshots/java_bughunt_3.png)         3. Try to add a todo with some special characters (e.g:</code>do &lt;&gt; this<code>)         4. We can clearly see both</code>newTodoRecord.title<code>and</code>todoTitle` - which is the cleaned title.         </p> <p>Level: Intermediate - The bug: Duplicate Todo adds an invalid todo instead of an exact copy of an existing one.     - Reproduce: Add a task and when hovering on the text, on the right side you have the &amp; symbol. Click on it to duplicate the task.     - Debug:         1. In the Rookout app, open the file <code>src/main/java/com/rookout/tutorial/TodoController.java</code>         2. Using the Rules pane on the right, select the Rule Type \"Log\"         3. Add the rule in the duplicateTodo function on the line with <code>todos.add(newTodoRecord);</code>         4. Before triggering the rule, let's edit it so it returns what we want         5. In the Rules pane on the right, click the Edit Rule (pen) icon next to the rule you just added. It will open up the Rule configuration as a JSON file         6. On line 37 in the <code>paths</code> object let's add a property <code>\"store.rookout.locals.dup\": \"frame.newTodoRecord\"</code>         7. On line 51 we have <code>processing.operations</code> object, let's add a new operation in the array :         name: send_rookout - means we are sending the information to the rookout web application path: store.rookout.locals.dup - we tell the rule what information to send</p> <pre><code>    ```\n    {\n        \"name\": \"send_rookout\",\n        \"path\": \"store.rookout.locals.dup\"\n    }\n    ```\n    8. Click the save button on the upper pane.\n    9. Add and duplicate a todo in order to see the output, now we can see what is being given to the object and match if we have an error in the function (parameters missing or in bad order).\n    ![Invalid Duplicate Todo Record](/img/screenshots/java_bughunt_5.png)\n</code></pre>"},{"location":"bughunt/#next-steps","title":"Next steps","text":"<p>Head over to our reference to understand all the Rookout components.  See our installation guides for platform-specific installation examples.</p>"},{"location":"cleanup/","title":"8. Cleanup","text":"<p>To cleanup resources, go to https://github.com/codespaces and delete the codespace.</p> <p>You may also want to deactivate or delete the API token.</p> <ul> <li>What's Next? </li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Requirements</p> <ul> <li>A Grail enabled Dynatrace SaaS Tenant (sign up here).</li> <li>A GitHub account to interact with the demo repository.</li> </ul>"},{"location":"getting-started/#1-dynatrace-tenant-setup","title":"1. Dynatrace Tenant Setup","text":"<p>You will need a Dynatrace SaaS tenant with a DPS pricing model and the 'Code Monitoring' rate card should be associated with it. In addition the application needs to be monitored with Dynatrace FullStack mode. The application runtime: Java, NodeJS.</p>"},{"location":"getting-started/#11-enable-observability-for-developers","title":"1.1 Enable Observability for Developers","text":"<ul> <li>Go to Settings &gt; Preferences &gt; OneAgent features.<ul> <li>Enable the Java Live-Debugger, Node.js Live-Debugger, or both, depending on your needs.</li> </ul> </li> <li>Go to Settings &gt; Observability for Developers &gt; Enable Observability for Developers</li> </ul> <p>More information can be found here</p>"},{"location":"getting-started/#12-set-iam-polocies","title":"1.2 Set IAM Polocies","text":"<p>We take security very seriously. So let's create a policy to set user-level Live Debugging breakpoints. </p> <p>We need two policies for your user to be able to set breakpoints and to read snapshots.  For this we go to Account Management &gt; Identity &amp; Access management &gt; + Policy</p> <p>Set breakpoints <pre><code>ALLOW storage.application.snapshots:read;\n</code></pre></p> <p>Read Snapshopts <pre><code>ALLOW storage.application.snapshots:read;\n</code></pre></p> <p>The policy should look like this:</p> <p></p> <p>Then we bind it to a user group. In this case since we are admins, let's bind the policy to the Admin group. </p> <p>Go to Group Management &gt; Select Admin Group &gt; + Permission  (and bind the policy)</p> <p></p> <p>Like this you have the fine control to give your developers, SRE teams and whoever you want to set breakpoints and read the snapshots. For more granular access please continue reading here </p>"},{"location":"getting-started/#13-enable-live-debugger-activegate-module","title":"1.3 Enable Live Debugger ActiveGate module","text":"<p>Now we need to enable the Live Debugger ActiveGate module:</p> <p><pre><code>#Set debugging_enabled to true in the custom.properties file.\nactiveGate:\n    customProperties:\n      value: |\n        [debugging]\n        debugging_enabled = true\n</code></pre> This is already set up for you in the codespaces automatically in the Dynakube.yaml file so no need to restart the ActiveGate.</p>"},{"location":"getting-started/#2-getting-the-permissions-for-monitoring-the-kubernetes-cluster-with-dynatrace","title":"2. Getting the permissions for monitoring the Kubernetes Cluster with Dynatrace","text":"<p>This codespace has everything automated for you so you can focus on what matters which in this enablement is to learn about the Live Debugging capabilities of the Dynatrace Platform.  You'll need two tokens:</p> <ol> <li>Operator Token</li> <li>Ingest Token </li> </ol> <p>We will get this two very easy from the Kubernetes App. </p>"},{"location":"getting-started/#21-get-the-operator-token-and-the-ingest-token-from-the-kubernetes-app","title":"2.1. Get the Operator Token and the Ingest Token from the Kubernetes App","text":"<ol> <li>Open the Kubernetes App (CTRL + K then type Kubernetes for fast access)</li> <li>Select the + Add cluster button</li> <li>Scroll down to the section Install Dynatrace Operator </li> <li>Click on generate Token for the 'Dynatrace Operator' and save it to your Notepad</li> <li>Click on generate Token for the 'Data Ingest Token' and save it to your Notepad</li> <li>You can close the Kubernetes App, we don't need it, we just needed the tokens.</li> </ol> <p>Let's launch the Codespace</p> <p>Now we are ready to launch the Codespace! You'll need your tenant and the two tokens previuosly gathered from above. When you enter the tenant please enter it without the 'apps' part, for production tenants eg. abc123 for live -&gt; https://abc123.live.dynatrace.com and for sprint -&gt; https://abc123.sprint.dynatracelabs.com no apps in the URL.</p>"},{"location":"getting-started/#3-launch-codespace","title":"3. Launch Codespace","text":""},{"location":"getting-started/#31-machine-type-variables","title":"3.1 Machine Type &amp; Variables","text":"<p>As a machine type select 4-core and enter your credentials within the following variables:</p> <ul> <li>DT_TENANT</li> <li>DT_OPERATOR_TOKEN</li> <li>DT_INGEST_TOKEN</li> </ul>"},{"location":"getting-started/#4-while-the-codespace-is-set-up-for-you-learn-powerful-usecases-for-live-debugging","title":"4. While the Codespace is set-up for you, learn powerful usecases for Live Debugging","text":"<p>We know your time is very valuable. This codespace takes around 6 minutes to be fully operational. A local Kubernetes (kind) cluster monitored by Dynatrace will be configured and in it a sample application, the TODO app will be deployed. To make your experience best, we are also installing and configuring tools like:</p> <p>k9s kubectl helm node jq python3 gh</p> <p>While the Codespace is being set up for you, here is a 6 minute read about powerful use cases beyond live debugging in our Dynatrace blog.</p> <p></p>"},{"location":"getting-started/#5-explore-what-has-been-deployed","title":"5. Explore What Has Been Deployed","text":"<p>Your Codespace has now deployed the following resources:</p> <ul> <li> <p>A local Kubernetes (kind) cluster monitored by Dynatrace, with some pre-deployed apps   that will be used later in the demo.</p> </li> <li> <p>After a couple of minutes, you'll see this screen in your codespaces terminal. It contains the links to the local expose labguide and the UI of the TODO application which we will Live Debug. </p> </li> </ul> <p>TODO</p> <p>TODO: Create some context on Bugs, Some Breaking Points stuff, elevate the talk for Developers.</p>"},{"location":"getting-started/#6-troubleshooting","title":"6. Troubleshooting","text":"<p>TODO</p> <p>TODO: Troubleshooting steps on the codespace, also add tips and tricks, show that the functions are loaded in the shell.</p> <ul> <li>Click Here to Continue </li> </ul>"},{"location":"resources/","title":"9. Resources","text":"<p>TODO</p>"},{"location":"whats-next/","title":"10. What's Next?","text":"<p>Content here about what the user should do, where they should and what they could learn next.</p>"},{"location":"snippets/admonitions/","title":"Admonitions","text":"<p>Warning</p> <p>This is a Warning </p> <p>Note</p> <p>This is a Note </p> <p>Important</p> <p>This is important </p> <p>Tipp</p> <p>This is a tipp </p>"},{"location":"snippets/disclaimer/","title":"Disclaimer","text":"<p>Support Policy</p> <p>This is an enablement project created by the Center of Excellence - Enablement Team at Dynatrace.</p> <p>Support is provided via GitHub issues only. The materials provided in this repository are offered \"as-is\" without any warranties, express or implied. Use them at your own risk.</p>"},{"location":"snippets/grail-requirements/","title":"Grail requirements","text":"<p>Requirements</p> <ul> <li>A Grail enabled Dynatrace SaaS Tenant (sign up here).</li> <li>A GitHub account to interact with the demo repository.</li> </ul>"},{"location":"snippets/view-code/","title":"View code","text":"<p>View the Code</p> <p>The code for this repository is hosted on GitHub. Click the \"View Code on GitHub\" link above.</p>"}]}