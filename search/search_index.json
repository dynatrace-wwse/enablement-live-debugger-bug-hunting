{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"1. About","text":"<p>Support Policy</p> <p>This is an enablement project created by the Center of Excellence - Enablement Team at Dynatrace.</p> <p>Support is provided via GitHub issues only. The materials provided in this repository are offered \"as-is\" without any warranties, express or implied. Use them at your own risk.</p>"},{"location":"#live-debugger-tutorial-bug-hunting-the-todo-apps","title":"Live Debugger Tutorial - Bug Hunting the TODO Apps","text":""},{"location":"#whats-this-tutorial-all-about","title":"What's this tutorial all about","text":"<p>In this tutorial we will embark a Bug Hunting journey learning the different features of the Live Debbuging Capabilities of the Dynatrace Plattform.</p> <p>The Live Debugger is a solution within the package of Observability for Developers of the Dynatrace Platform which provides developers with instant access to code-level debug data needed to troubleshoot and understand complex, modern applications with no extra coding, redeployments, or restarts.</p> <ul> <li>Debug in any environment or application and run with any architecture</li> <li>Instant insights and data from any issue</li> <li>Full visibility into code</li> <li>Instantly debug complex workflows</li> <li>Built for hybrid cloud architectures and large-scale deployments</li> <li>Robust security and data privacy controls</li> <li>Increase developer satisfaction &amp; happiness (remove frustrations)</li> </ul> <p> </p> <p>Are you ready to start the Bug hunting journey and ready to learn how to improve and empower the Developers Productivity? </p> <p>What will we do</p> <p>In this tutorial we will learn how easy it is to live debug an application in a Kubernetes Cluster. This is a TODO application which should help us be more effective but unfortunately it has bugs. So let' find them so we can be more productive and effective!</p> <ul> <li>Yes! let's begin </li> </ul>"},{"location":"1-bug-clear-completed/","title":"4. 1st Bug - clear completed","text":"<p>The Bug 'Clear completed'</p> <p>Level: Beginner</p>"},{"location":"1-bug-clear-completed/#open-the-todo-app-and-add-a-couple-of-tasks","title":"Open the TODO App and add a couple of tasks","text":"<p>In VSCode open a new terminal and in the Welcome Message you should see a link to the Todo App UI. Click on it. Now add a couple of tasks. It should look something like this: </p> <ul> <li>Add a couple of tasks. </li> <li>Complete some of them (or all, depending how productive you are ;) . </li> <li>Now click on: <code>Clear completed</code> </li> </ul> <p></p> <ul> <li>Are the tasks cleared?</li> </ul> <p>Apparently the button does not work. When clicked - completed todos are not cleared. </p> <p>We embark our Bug hunting journey! </p> <p>There are multiple ways how dive deep into the issue because Dynatrace is monitoring your Kubernetes cluster, all workloads in it, all it's traces with code level insights and all real users accessing the exposed application.</p> <ul> <li>Click Here to continue the quest</li> </ul>"},{"location":"1-bug-hunt-via-k8s/","title":"5. 1st Bug - hunt via kubernetes","text":""},{"location":"1-bug-hunt-via-k8s/#hunting-via-the-kubernetes-road","title":"Hunting via the kubernetes road","text":"<ul> <li>Open the Kubernetes App &gt; You'll see a cluster with the name \"codespace-xxxx\". That's your Kind cluster being FullStack monitored.</li> </ul> <ul> <li> <p>On the right hand side, click on Workloads, the Workloads Page will open. </p> </li> <li> <p>Select the <code>todoapp</code>workload. </p> </li> </ul> <p></p> <ul> <li>On the Overview in the right hand side, scroll down and open the Services app. (this are the traces grouped withing Dynatrace Services)</li> </ul> <p></p> <ul> <li>Click on the Spring Boot one and then on the right corner \"View Traces\"</li> </ul> <p></p> <ul> <li>This will open all the traces that went through your application... wow!</li> </ul> <p>As you can see, there are traces with the name <code>clearCompletedTodos</code> that just took a couple ms and are not throwing any errors. The response code is 200, but since this is a bug it does not mean the application is working as expected.</p> <p>This specific span it was just 2.98ms. On the right hand side, you can see the Tracing details, look how much data was captured automatically \ud83e\udd29.</p> <p></p> <p>In the second node of the span, in the Code Attributes section, we can see the <code>Code function: clearCompletedTodos</code> and the <code>Code Namespace: com.dynatrace.todoapp.TodoController</code> </p> <p>Now we know which method and which package! Let's put our Developer Hat \ud83c\udfa9 and open the Live Debugger.</p>"},{"location":"1-bug-hunt-via-k8s/#open-live-debugger","title":"Open Live Debugger","text":"<p>Type CTRL + K &gt; Live Debugger for super fast access to the Live Debugger application. </p> <p>In \"Customize your debug session\" we add the filters <code>namespace:todoapp</code> <code>k8s.workload.name:todoapp</code>. This information was also available in the trace that we just took a look at. There are multiple filters you can add, important here is to have a filter that can be reused and is not specifc to an instance in case the pods a recycled and you want to make sure you are always setting breakpoints to a specific workload in a specific cluster (or multiple)</p> <p></p>"},{"location":"1-bug-hunt-via-k8s/#connect-the-github-repository-manually","title":"Connect the Github repository (manually)","text":"<p>Once you click next, no repository was found for this application (this is because no repo was configured). Let's add it manually.</p> <ul> <li> <p>Click on the + sign to add a new one </p> </li> <li> <p>Click on authenticate. It'll open a window where you'll authenticate with your GitHub personal account.</p> </li> </ul> <p>Why? we take security very seriously, meaning the source code will never leave the browser, the client. </p> <ul> <li>In organisation you enter: <code>dynatrace-wwse</code></li> <li>In Repository you enter this repo: <code>enablement-live-debugger-bug-hunting</code></li> </ul> <p></p> <ul> <li>Click on Done!</li> </ul> <p>Now you are all set! you should see an  image like this:</p> <p></p>"},{"location":"1-bug-hunt-via-k8s/#navigate-to-the-todocontrollerjava","title":"Navigate to the TodoController.java","text":"<p>You have multiple ways to open the TodoController.java. Let's say you know the code, then easily you'll navigate to it by opening the Source Code menu on the left pane, navigate to: <code>todoapp &gt; src &gt; main &gt; java &gt; com &gt; dynatrace &gt; todoapp &gt; TodoController.java</code></p> <p>if you don't know the structure, use the search and type <code>TodoController</code>it'll search for all matches, you'll see the Class file so you can open it.</p> <p></p> <p>Now let's search for the Method <code>clearCompletedTodos</code>. You'll find it around line 72. Set up a non-breaking-breakpoint on the return code.</p> <p>Go back to the TODO app and clear again on \"Clear completed\"</p> <p>Return to the Live Debugger and see the Snaphot captured, open it and see all the variables that were captured with their values.</p> <p>Do you see the bug? can you understand what happened and why the completed todos are not deleted? We can see two variables, the <code>todos</code> with a length of 3 and <code>todoStore</code> with a length of 0.</p> <p>In line 84 <code>todoStore.remove(todoRecord)</code> the variable todoStore is a newly instantiated variable. This is a mistake, it should be replaced by the variable <code>todos</code> so the function can succesfully remove all cleared tasks!</p> <p>Yay! we found the first bug!!!</p> <p></p> <p>Seeing is believing \ud83e\udd29</p> <p>Did you notice? With Dynatrace we were able to navigate from the Kubernetes Cluster all the way down to the workload, it's traces cotinuing down to the specific method and namespace of the called function and variables. With one click on the method we were able to set a non-breaking breakpoint in our production application deployed in a Kubernetes Cluster where with a single snapshot we were able to identify the bug. Debugging Kubernetes Clusters has never been so easy!!! And in Production!! \ud83e\udd2f</p> <ul> <li>Click here to continue the quest with the next Bug</li> </ul>"},{"location":"2-bug-hunt-via-tracing/","title":"7. 2nd Bug - hunt via traces","text":""},{"location":"2-bug-hunt-via-tracing/#open-the-distributed-tracing-app","title":"Open the Distributed Tracing App","text":"<p>Protip: Open the Tracing App anywhere in Dynatrace</p> <p>type CTRL + K and then Tracing, the tracing app should appear in the super search. </p> <p>Want to learn more about the Tracing App?</p> <p>If you want to learn more about the new Distributed Tracing App, watch this amazing 12 min recording of Dynatrace App Spotlights</p> <ul> <li>In the filter add <code>\"Kubernetes namespace\" = todoapp AND \"Kubernetes workload\" = todoapp</code></li> </ul> <p>You can also let the autocomplete help you or use the facets on the left-hand side to filter for all requests of the POD <code>todoapp</code> that is deployed in the namespace <code>todoapp</code>.</p> <p></p> <p>If we take a look at the traces, we can see there is a trace named <code>addTodo</code>. By opening this trace, on the details on the right hand side, we can see in the <code>Code Attributes</code> that the <code>Code function = addTodo</code> and the <code>Code Namespace = com.dynatrace.todoapp.TodoController</code></p> <p>Now we know where in all the applications code we should be looking for the bug!</p>"},{"location":"2-bug-hunt-via-tracing/#open-the-live-debugger","title":"Open the Live Debugger","text":"<ul> <li>Let's search for the <code>Code function = addTodo</code> under the <code>Code Namespace = com.dynatrace.todoapp.TodoController</code>, in the search by typping <code>TodoController</code> the class file appears, open it.</li> <li>Now let's search for the AddTodo function, the declaration is in line 24.</li> </ul> <p>Do you see something weird? The deveoloper left a String function on line 28 with <code>getTitle().replaceAll(\"[^a-zA-Z0-9\\\\s]+\", \"\");</code></p> <ul> <li>Let's add two breakpoints around that line, one before, let's say on line 25 and another on line 32.</li> <li>Go to the TodoApp and add a Task with a special character. </li> <li>Go back to the Live Debugger and watch the two snapshots get gathered on real time.</li> <li>If you open the first Hit, the one on line 25, you'll notice the Object <code>newTodoRecord.title = This is exciting!!!</code> that contains the exclamation mark. Meaning the data is being correctly passed on to the function ToDo, but then something happens and the <code>!!!</code> are removed.</li> <li>If you then look for the same attribute in the same method on the second HIT you'll see that the <code>!!!</code> are gone.</li> </ul>"},{"location":"2-bug-hunt-via-tracing/#watching-variables","title":"Watching variables","text":"<ul> <li>We want to make your life as a developer easier. With the Live Debugger you can watch varibles, right click on the  <code>newTodoRecord.title</code> and select <code>Watch</code></li> </ul> <ul> <li>You'll see that in the snapshots, the title of both snapshots are added for ease of debugging complex applications. This is a very simple app, but imagine you have hundreds or thousend of lines of code, and are not even yours, using this strategy you can understand how specific variables change through the code.</li> </ul> <ul> <li>Click here to continue the quest with the next Bug</li> </ul>"},{"location":"2-bug-special-characters/","title":"6. 2nd Bug - special characters","text":"<p>The Bug 'Special characters'</p> <p>Level: Beginner</p>"},{"location":"2-bug-special-characters/#open-the-todo-app-and-add-a-task-with-an-exclamation-mark","title":"Open the TODO App and add a Task with an exclamation mark!","text":"<ul> <li>Add a task with an exclamation mark! or a special character for that matter, like this:</li> </ul> <ul> <li>Now type ENTER to add the task</li> </ul> <ul> <li>What happened? As you can see the signs are being removed. Why?</li> </ul> <p>Let's continue with the bug hunting again! Now, let's assume we are new developers in the TODO app company. How difficult would it be to find the bug? To know where is the app running? which pod is delivering the requests? which namespace and line of code? Well, not with Dynatrace! We already learned how easy it was to find the TODO app within the Kubernetes App and from there we opened the traces in the Distributed Tracing app, so let's go there.</p> <ul> <li>Click here to Continue the quest</li> </ul>"},{"location":"3-bug-duplicate-task/","title":"8. 3rd Bug - duplicate task","text":"<p>The Bug 'Duplicate task'</p> <p>Level: Intermediate</p>"},{"location":"3-bug-duplicate-task/#open-the-todo-app-and-add-a-task","title":"Open the TODO App and add a Task","text":"<p>The TODO app has a duplicate function, let's give it a try.</p> <ul> <li> <p>Add a Task that we want to duplicate, we add Call the Bugbusters </p> </li> <li> <p>Hover over the added Task and on the right you'll notice a &amp; symbol. This should duplicate the task. </p> </li> </ul> <p>What happened?  We notice a new task was created, but instead of a duplicate we see a weird string, looks like an ID. </p> <p>Let's continue our Bug Hunting Quest!</p> <ul> <li>Click here to continue the quest</li> </ul>"},{"location":"3-bug-hunt-via-logs/","title":"9. 3rd Bug - hunt via logs","text":""},{"location":"3-bug-hunt-via-logs/#hunting-road-logs-app","title":"Hunting road - Logs App","text":"<p>Now let's try a different approach, we have seen how easy it is to find the traces via the Distributed Tracing App. Let's find the trace and it's method and codespace via the Logs App. The Dynatrace Plattform is context aware, it knows which traces write which logs, from which pod they are coming from and even which user generated the transaction. </p> <ul> <li>Open the Logs App. Again let's be a pro and type CTRL + K and then Logs, the Logs App should appear in the super search.</li> <li>In the filter type the content or part of the content of the Task, in my case I wrote <code>Call the Bugbusters</code>, so I'm searching for <code>content=*bugbusters*</code>. I'm assuming the developers is logging the content I'm writing in the app since \"we don't know the code\" and in our quests we are searching via logs. Let's see if we are lucky.</li> </ul> <p> Wow, that was fast, we see two log entries with that match and are coming from the same pod. One was adding the task, the other duplicating it. </p> <ul> <li> <p>We can either right click on the Log line and open record with and you select the Distributed Tracing app or on the right pane, above the Topology of the Log entry, there is a button for your convenience that says Open trace </p> </li> <li> <p>Either way will open the Distributed Tracing app</p> </li> </ul> <p>From the content if you look carefully, you can see that the duplicate has the ID and title swapped. </p>"},{"location":"3-bug-hunt-via-logs/#hunting-road-distributed-tracing-app","title":"Hunting road - Distributed Tracing App","text":"<p>Via the Distributed Tracing app</p> <p>In case you want to skip searching the Trace via the log entries, here is how to find it only via traces:</p> <ul> <li>In the filter add <code>\"Kubernetes namespace\" = todoapp AND \"Kubernetes workload\" = todoapp</code> </li> <li>See the incoming requests, you'll notice one with the name <code>duplicateTodo</code></li> </ul> <ul> <li> <p>The trace has the <code>Code function = duplicateTodo</code> and the <code>Code Namespace = com.dynatrace.todoapp.TodoController</code></p> </li> <li> <p>Now that we have the trace, weather we found it via the Log entries or the traces, we can notice that it has also a HTTP Code 200, meaning there are no failures, but the app does not work as we want it to work. Let's debug the function!</p> </li> </ul>"},{"location":"3-bug-hunt-via-logs/#open-the-live-debugger","title":"Open the Live Debugger","text":"<ul> <li>Let's search for the <code>Code function = duplicateTodo</code> under the <code>Code Namespace = com.dynatrace.todoapp.TodoController</code>, in the search by typping <code>TodoController</code> the class file appears, open it.</li> <li>The declaration the of the <code>Code function = duplicateTodo</code> is in line 95.</li> <li>Let's put a non-breaking breakpoint on line 107</li> <li>Go to the Todo app and repeat the bug.</li> </ul> <p>Did you notice how the Map has in the items [0] and [1] the title and UUIDs are swapped?</p> <ul> <li>This is also noticeable in the sourcecode, lines 102 and 103 are being swapped. </li> </ul> <p></p> <ul> <li>Click here to continue </li> </ul>"},{"location":"cleanup/","title":"10. Cleanup","text":"<p>Deleting the codespace from inside the container</p> <p>We like to make your life easier, for convenience there is a function loaded in the shell of the Codespace for deleting the codespace, just type <code>deleteCodespace</code>. This will trigger the deletion of the codespace.</p> <p>Another way to do this is by going to https://github.com/codespaces and delete the codespace.</p> <p>You may also want to deactivate or delete the API token needed for this lab.</p> <ul> <li>Ressources</li> </ul>"},{"location":"codespaces/","title":"Codespaces","text":""},{"location":"codespaces/#1-launch-codespace","title":"1. Launch Codespace","text":""},{"location":"codespaces/#11-codespaces-configuration","title":"1.1 Codespaces configuration","text":"<p>Branch, Machine sizing &amp; secrets</p> <ul> <li>Branch<ul> <li>select the main branch</li> </ul> </li> <li>Machine sizing<ul> <li>As a machine type select 4-core</li> </ul> </li> <li>Secrets (enter your credentials within the following variables)<ul> <li>DT_TENANT</li> <li>DT_OPERATOR_TOKEN</li> <li>DT_INGEST_TOKEN</li> </ul> </li> </ul>"},{"location":"codespaces/#2-while-the-codespace-is-set-up-for-you-learn-powerful-usecases-for-live-debugging","title":"2. While the Codespace is set-up for you, learn powerful usecases for Live Debugging","text":"<p>We know your time is very valuable. This codespace takes around 6 minutes to be fully operational. A local Kubernetes (kind) cluster monitored by Dynatrace will be configured and in it a sample application, the TODO app will be deployed. To make your experience best, we are also installing and configuring tools like:</p> <p>k9s kubectl helm node jq python3 gh</p> <p>While the Codespace is being set up for you, here is a 6 minute read about powerful use cases beyond live debugging in our Dynatrace blog.</p> <p></p>"},{"location":"codespaces/#3-explore-what-has-been-deployed","title":"3. Explore what has been deployed","text":"<p>Your Codespace has now deployed the following resources:</p> <ul> <li> <p>A local Kubernetes (kind) cluster monitored by Dynatrace, with some pre-deployed apps   that will be used later in the demo.</p> </li> <li> <p>After a couple of minutes, you'll see this screen in your codespaces terminal. It contains the links to the local expose labguide and the UI of the TODO application which we will Live Debug. </p> </li> </ul>"},{"location":"codespaces/#4-tips-tricks","title":"4. Tips &amp; Tricks","text":"<p>We want to boost your learning and try to make your DEV experience as smooth as possible with Dynatrace trainings. Your Codespaces have a couple of convenience features added. </p>"},{"location":"codespaces/#show-the-greeting","title":"Show the greeting","text":"<p>In the terminal, there are functions loaded for your convenience. By creating a new Terminal the Greeting will be shown that includes the links to the exposed apps, the Github  pages, the Github Repository, the Dynatrace Tenant that is bound to this devcontainer and some of the tools installed.</p> <p>You can create a new Terminal directly in VSCode, type <code>zsh</code> or call the function <code>printGreeting</code> and that will print the greeting with the most relevant information.</p>"},{"location":"codespaces/#navigating-in-your-local-kubernetes","title":"Navigating in your local Kubernetes","text":"<p>The client <code>kubectl</code> and <code>k9s</code>are configured so you can navigate in your local Kubernetes like butter.  </p>"},{"location":"codespaces/#exposing-the-apps-to-the-public","title":"Exposing the apps to the public","text":"<p>The apps MKdocs and TODO app are being exposed in the devcontainer to your localhost. If you want to make the endpoints public accesible, just go to the ports section in VsCode, right click on them and change the visibility to public.</p>"},{"location":"codespaces/#5-troubleshooting","title":"5. Troubleshooting","text":""},{"location":"codespaces/#exposing-the-app","title":"Exposing the App","text":"<p>The todo app is being exposed via <code>kubectl port-forward ...</code> if the container is stopped and started again or if you delete/recicle the pod the port-forwarding process might crash. You can easily see what is being exposed by typing the function <code>showOpenPorts</code> </p> <pre><code>showOpenPorts(){\n  sudo netstat -tulnp\n}\n</code></pre> <p>and to expose the TODO app, type <code>exposeTodoApp</code>, </p> <pre><code>exposeTodoApp(){\n  printInfo \"Exposing Todo App in your dev.container\"\n  nohup kubectl port-forward service/todoapp 8080:8080  -n todoapp --address=\"0.0.0.0\" &gt; /tmp/kubectl-port-forward.log 2&gt;&amp;1 &amp;\n}\n</code></pre> <ul> <li>Let's start our Bug hunting quest</li> </ul>"},{"location":"getting-started/","title":"2. Getting started","text":"<p>Requirements</p> <ul> <li>A Grail enabled Dynatrace SaaS Tenant (sign up here).</li> <li>A GitHub account to interact with the demo repository.</li> </ul>"},{"location":"getting-started/#1-dynatrace-tenant-setup","title":"1. Dynatrace Tenant Setup","text":"<p>You will need a Dynatrace SaaS tenant with a DPS pricing model and the 'Code Monitoring' rate card should be associated with it. In addition the application needs to be monitored with Dynatrace FullStack mode. The application runtime: Java, NodeJS.</p>"},{"location":"getting-started/#11-enable-observability-for-developers","title":"1.1 Enable Observability for Developers","text":"<ul> <li>Go to Settings &gt; Preferences &gt; OneAgent features.<ul> <li>Enable the Java Live-Debugger, Node.js Live-Debugger, or both, depending on your needs.</li> </ul> </li> <li>Go to Settings &gt; Observability for Developers &gt; Enable Observability for Developers</li> </ul> <p>More information can be found here</p>"},{"location":"getting-started/#12-set-iam-polocies","title":"1.2 Set IAM Polocies","text":"<p>We take security very seriously. So let's create a policy to set user-level Live Debugging breakpoints. </p> <p>We need two policies for your user to be able to set breakpoints and to read snapshots.  For this we go to **Account Management &gt; Identity &amp; Access management &gt; + Policy **</p> <p>Set breakpoints <pre><code>ALLOW storage.application.snapshots:set;\n</code></pre></p> <p>Read Snapshopts <pre><code>ALLOW storage.application.snapshots:read;\nALLOW storage:buckets:read WHERE storage:table-name = \"application.snapshots\";\n</code></pre></p> <p>The policy should look like this:</p> <p></p> <p>Then we bind it to a user group. In this case since we are admins, let's bind the policy to the Admin group. Notice that the created policy is for an Admin and also for a Developer. Since we allow to <code>read</code> and <code>set</code> breakpoints but also to <code>manage</code> breakpoints which is explained here.</p> <p>Go to Group Management &gt; Select Admin Group &gt; + Permission  (and bind the policy) </p> <p>Like this you have the fine control to give your developers, SRE teams and whoever you want to set breakpoints and read the snapshots. For more granular access please continue reading here </p>"},{"location":"getting-started/#13-enable-live-debugger-activegate-module","title":"1.3 Enable Live Debugger ActiveGate module","text":"<p>Now we need to enable the Live Debugger ActiveGate module:</p> <p><pre><code>#Set debugging_enabled to true in the custom.properties file.\nactiveGate:\n    customProperties:\n      value: |\n        [debugging]\n        debugging_enabled = true\n</code></pre> This is already set up for you in the codespaces automatically in the Dynakube.yaml file so no need to restart the ActiveGate.</p>"},{"location":"getting-started/#2-getting-the-permissions-for-monitoring-the-kubernetes-cluster-with-dynatrace","title":"2. Getting the permissions for monitoring the Kubernetes Cluster with Dynatrace","text":"<p>This codespace has everything automated for you so you can focus on what matters which in this enablement is to learn about the Live Debugging capabilities of the Dynatrace Platform.  You'll need two tokens:</p> <ol> <li>Operator Token</li> <li>Ingest Token </li> </ol> <p>We will get this two very easy from the Kubernetes App. </p>"},{"location":"getting-started/#21-get-the-operator-token-and-the-ingest-token-from-the-kubernetes-app","title":"2.1. Get the Operator Token and the Ingest Token from the Kubernetes App","text":"<ol> <li>Open the Kubernetes App (CTRL + K then type Kubernetes for fast access)</li> <li>Select the + Add cluster button</li> <li>Scroll down to the section Install Dynatrace Operator </li> <li>Click on generate Token for the 'Dynatrace Operator' and save it to your Notepad</li> <li>Click on generate Token for the 'Data Ingest Token' and save it to your Notepad</li> <li>You can close the Kubernetes App, we don't need it, we just needed the tokens.</li> </ol> <p>Let's launch the Codespace</p> <p>Now we are ready to launch the Codespace! You'll need your tenant and the two tokens previuosly gathered from above. When you enter the tenant please enter it without the 'apps' part, for production tenants eg. abc123 for live -&gt; https://abc123.live.dynatrace.com and for sprint -&gt; https://abc123.sprint.dynatracelabs.com no apps in the URL.</p> <ul> <li>Let's launch Codespaces</li> </ul>"},{"location":"resources/","title":"11. Resources","text":""},{"location":"resources/#get-your-dynatrace-environment","title":"Get your Dynatrace environment","text":"<ul> <li>Create a Free Trial in Dynatrace</li> </ul>"},{"location":"resources/#documentation","title":"Documentation","text":"<ul> <li>Dynatrace documentation - Developer Observability</li> </ul>"},{"location":"resources/#blog-posts","title":"Blog posts","text":"<ul> <li> <p>5 Powerful Usecases beyond debugging for Dynatrace Live Debugger</p> </li> <li> <p>Dare to debug production with Dynatrace live debugger</p> </li> <li> <p>Debug complex performance issues in production</p> </li> <li> <p>Dynatrace Observability for Developers saves time with real-time data</p> </li> </ul>"},{"location":"resources/#live-debugger-plugins-dont-leave-your-ide-to-hunt-production-bugs","title":"Live Debugger Plugins, don't leave your IDE to Hunt production bugs","text":"<ul> <li> <p>VSCode Plugin</p> </li> <li> <p>Jetbrains Plugin</p> </li> </ul> <ul> <li>What's Next? </li> </ul>"},{"location":"scratch/","title":"Scratch","text":"<p>.ConnectTimeoutException: Connect to sg-eu-west-1-54-77-175-7-acceptancee2e-euwest.sprint.dynatracelabs.com:443 [sg-eu-west-1-54-77-175-7-acceptancee2e-euwest.sprint.dynatracelabs.com/54.77.175.7] endpoint='https://10.96.0.1:443', </p> <p>activegate 2025-04-07 12:47:18 UTC DEBUG   [] [, LogStatisticsWriter] Stats for the last: 600 seconds. Local time: 2025-04-07 12:47:18 GMT. Threads: 645. Active agents: 2. Memory usage in kB: free memory: 30,924; heap: 116,736; max heap: 524,288; direct byte buffers: 871.                                                                   activegate Message Statistics:                                                                                                                                                                                                                                                                                                                                               activegate  AGENT_INCOMING:                 779; Errors:   0; Size:  844.6 KiB;  AGENT_OUTGOING:                 328; Errors:   0; Timeouts:   0; Size:   20.8 KiB;                                                                                                                                                                                                          activegate  ANY_SERVER_INCOMING:             50; Errors:   0; Size:   28.8 KiB;  ANY_SERVER_OUTGOING:             50; Errors:   0; Timeouts:   0; Size:    4.3 KiB;                                                                                                                                                                                                          activegate  SERVER_INCOMING:                730; Errors:   0; Size:   40.3 KiB;  SERVER_OUTGOING:               3640; Errors:   0; Timeouts:   0; Size:    3.3 MiB;                                                                                                                                                                                                          activegate Network statistics:                                                                                                                                                                                                                                                                                                                                               activegate  outgoingHttpErrors: 24;  incomingHttpErrors: 0                                                                                                                                                                                                                                                                                                                   activegate Queue length: server Id: 3; OneWay: 53; Request: 0server Id: 4; OneWay: 55; Request: 1server Id: 6; OneWay: 51; Request: 0. Selfmonitoring: enabled: true; metrics sent: 2574.                                                                                                                                                                                    activegate 2025-04-07 12:57:18 UTC DEBUG   [] [, LogStatisticsWriter] Stats for the last: 600 seconds. Local time: 2025-04-07 12:57:18 GMT. Threads: 645. Active agents: 2. Memory usage in kB: free memory: 41,852; heap: 119,808; max heap: 524,288; direct byte buffers: 1,298.                                                                 activegate Message Statistics:                                                                                                                                                                                                                                                                                                                                               activegate  AGENT_INCOMING:                1494; Errors:   0; Size:    1.9 MiB;  AGENT_OUTGOING:                 600; Errors:   0; Timeouts:   0; Size:   36.8 KiB;                                                                                                                                                                                                          activegate  ANY_SERVER_INCOMING:             50; Errors:   0; Size:   13.8 KiB;  ANY_SERVER_OUTGOING:             50; Errors:   0; Timeouts:   0; Size:    3.3 KiB;                                                                                                                                                                                                          activegate  SERVER_INCOMING:               1049; Errors:   0; Size:   56.3 KiB;  SERVER_OUTGOING:               4697; Errors:   0; Timeouts:   0; Size:    4.7 MiB;                                                                                                                                                                                                          activegate Network statistics:                                                                                                                                                                                                                                                                                                                                               activegate  outgoingHttpErrors: 0;  incomingHttpErrors: 0                                                                                                                                                                                                                                                                                                                    activegate Queue length: server Id: 3; OneWay: 53; Request: 0server Id: 4; OneWay: 55; Request: 1server Id: 6; OneWay: 51; Request: 0. Selfmonitoring: enabled: true; metrics sent: 5368.                                                                                                                                                                                    activegate 2025-04-07 12:59:54 UTC INFO    [] [, MessageBroker] First-chance exception org.apache.http.conn.ConnectTimeoutException: Connect to sg-eu-west-1-54-77-175-7-acceptancee2e-euwest.sprint.dynatracelabs.com:443 [sg-eu-west-1-54-77-175-7-acceptancee2e-euwest.sprint.dynatracelabs.com/54.77.175.7] failed: Connect timed out on http req uest to URI 'https://sg-eu-west-1-54-77-175-7-acceptancee2e-euwest.sprint.dynatracelabs.com/communication', proxy: no proxy [Suppressing further messages for 10 minutes] [skipped logs: 10]                                                                                                                                                                                 activegate 2025-04-07 13:07:18 UTC DEBUG   [] [, LogStatisticsWriter] Stats for the last: 600 seconds. Local time: 2025-04-07 13:07:18 GMT. Threads: 645. Active agents: 2. Memory usage in kB: free memory: 52,378; heap: 119,808; max heap: 524,288; direct byte buffers: 1,670.                                                                 activegate Message Statistics:                                                                                                                                                                                                                                                                                                                                               activegate  AGENT_INCOMING:                1494; Errors:   0; Size:    1.9 MiB;  AGENT_OUTGOING:                 600; Errors:   0; Timeouts:   0; Size:   36.8 KiB;                                                                                                                                                                                                          activegate  ANY_SERVER_INCOMING:             50; Errors:   0; Size:   21.0 KiB;  ANY_SERVER_OUTGOING:             50; Errors:   0; Timeouts:   0; Size:    3.3 KiB;                                                                                                                                                                                                          activegate  SERVER_INCOMING:               1049; Errors:   0; Size:   56.3 KiB;  SERVER_OUTGOING:               4693; Errors:   0; Timeouts:   0; Size:    4.7 MiB;                                                                                                                                                                                                          activegate Network statistics:                                                                                                                                                                                                                                                                                                                                               activegate  outgoingHttpErrors: 5;  incomingHttpErrors: 0                                                                                                                                                                                                                                                                                                                    activegate Queue length: server Id: 3; OneWay: 51; Request: 0server Id: 4; OneWay: 55; Request: 1server Id: 6; OneWay: 51; Request: 0. Selfmonitoring: enabled: true; metrics sent: 8156.                                                                                                                                                                                    activegate 2025-04-07 13:09:41 UTC INFO    [] [DalWatchClientAdapter] Watching for changes (/api/v1/events) timed out. Will reconnect with resourceVersion='3475': java.net.SocketTimeoutException: Read timed out [Suppressing further messages for 30 minutes] [skipped logs: 26]                                                                                activegate 2025-04-07 13:15:32 UTC WARNING [] [ListWatchController] An error occurred in state WATCH. Will transition to next state in order to avoid data loss: configurationId='3814973623141514629', endpoint='https://10.96.0.1:443', resource='/api/v1/events' [Suppressing further messages for 30 minutes] [skipped logs: 2]                                activegate com.dynatrace.apiconnector.pipeline.stage.StageExecutionException: Error watch event received, stopping watch (The resourceVersion for the provided watch is too old.)                                                                                                                                                                                            activegate     at com.dynatrace.apiconnector.k8s.dataaccess.DalWatchClientAdapter.handleNonLifecycleType(DalWatchClientAdapter.java:203)                                                                                                                                                                                                                                     activegate     at com.dynatrace.apiconnector.k8s.dataaccess.DalWatchClientAdapter.watch(DalWatchClientAdapter.java:138)                                                                                                                                                                                                                                                      activegate     at com.dynatrace.apiconnector.k8s.informer.ListWatchController.executeCurrentState(ListWatchController.java:157)                                                                                                                                                                                                                                              activegate     at com.dynatrace.apiconnector.k8s.informer.ListWatchController.evaluateState(ListWatchController.java:135)                                                                                                                                                                                                                                                    activegate     at com.dynatrace.apiconnector.k8s.informer.ListWatchController.run(ListWatchController.java:127)                                                                                                                                                                                                                                                              activegate     at com.dynatrace.gen2.foundation.util.concurrency.api.LatchRunnable.run(LatchRunnable.java:34)                                                                                                                                                                                                                                                                activegate     at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)                                                                                                                                                                                                                                                                                activegate     at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)                                                                                                                                                                                                                                                                               activegate     at java.base/java.lang.Thread.run(Unknown Source)                                                                                                                                                                                                                                                                                                             activegate                                                                                                                                                                                                                                                                                                                                                                   activegate 2025-04-07 13:17:18 UTC DEBUG   [] [, LogStatisticsWriter] Stats for the last: 600 seconds. Local time: 2025-04-07 13:17:18 GMT. Threads: 645. Active agents: 2. Memory usage in kB: free memory: 30,470; heap: 119,808; max heap: 524,288; direct byte buffers: 2,004.                                                                 activegate Message Statistics:                                                                                                                                                                                                                                                                                                                                               activegate  AGENT_INCOMING:                1494; Errors:   0; Size:    1.8 MiB;  AGENT_OUTGOING:                 600; Errors:   0; Timeouts:   0; Size:   36.8 KiB;                                                                                                                                                                                                          activegate  ANY_SERVER_INCOMING:             50; Errors:   0; Size:   21.0 KiB;  ANY_SERVER_OUTGOING:             50; Errors:   0; Timeouts:   0; Size:    3.3 KiB;                                                                                                                                                                                                          activegate  SERVER_INCOMING:               1049; Errors:   0; Size:   56.3 KiB;  SERVER_OUTGOING:               4693; Errors:   0; Timeouts:   0; Size:    4.6 MiB;                                                                                                                                                                                                          activegate Network statistics:                                                                                                                                                                                                                                                                                                                                               activegate  outgoingHttpErrors: 0;  incomingHttpErrors: 0                                                                                                                                                                                                                                                                                                                    activegate Queue length: server Id: 3; OneWay: 54; Request: 0server Id: 4; OneWay: 55; Request: 1server Id: 6; OneWay: 51; Request: 0. Selfmonitoring: enabled: true; metrics sent: 10949.    <p>bash-4.4$ curl -k -v https://10.96.0.1:443 * Rebuilt URL to: https://10.96.0.1:443/ *   Trying 10.96.0.1... * TCP_NODELAY set * Connected to 10.96.0.1 (10.96.0.1) port 443 (#0) * ALPN, offering h2 * ALPN, offering http/1.1 * successfully set certificate verify locations: *   CAfile: /etc/pki/tls/certs/ca-bundle.crt   CApath: none * TLSv1.3 (OUT), TLS handshake, Client hello (1): * TLSv1.3 (IN), TLS handshake, Server hello (2): &lt;  * TLSv1.3 (IN), TLS app data, [no content] (0): {   \"kind\": \"Status\",   \"apiVersion\": \"v1\",   \"metadata\": {},   \"status\": \"Failure\",   \"message\": \"forbidden: User \\\"system:anonymous\\\" cannot get path \\\"/\\\"\",   \"reason\": \"Forbidden\",   \"details\": {},   \"code\": 403 * Closing connection 0 * TLSv1.3 (OUT), TLS alert, [no content] (0): * TLSv1.3 (OUT), TLS alert, close notify (256):</p> <p>X change path to 'app' - AG issues? Keep an eye - Startup, timer needed for AG? - On LD says 3 active instances... why? - change image of IAM policies - modify the Makefile of the app, make it cleaner - Do build and push to own repo - Expose port 8080 always - map ingress to all * on app to port 8080 for having nigx RUM instrumentation</p>"},{"location":"whats-next/","title":"12. What's next?","text":"<p>More to come</p> <ul> <li>Stay tuned, more enablements are coming whith more advanced usecases, where we can:<ul> <li>hunt bugs from Real User monitoring</li> <li>watch variables in deep nested in objects</li> <li>use the Live Debugger plugin so you never leave your IDE</li> <li>fix code on the fly and verify that the bugs are gone </li> </ul> </li> </ul>"},{"location":"snippets/admonitions/","title":"Admonitions","text":"<p>Warning</p> <p>This is a Warning </p> <p>Note</p> <p>This is a Note </p> <p>Important</p> <p>This is important </p> <p>Tipp</p> <p>This is a tipp </p>"},{"location":"snippets/disclaimer/","title":"Disclaimer","text":"<p>Support Policy</p> <p>This is an enablement project created by the Center of Excellence - Enablement Team at Dynatrace.</p> <p>Support is provided via GitHub issues only. The materials provided in this repository are offered \"as-is\" without any warranties, express or implied. Use them at your own risk.</p>"},{"location":"snippets/grail-requirements/","title":"Grail requirements","text":"<p>Requirements</p> <ul> <li>A Grail enabled Dynatrace SaaS Tenant (sign up here).</li> <li>A GitHub account to interact with the demo repository.</li> </ul>"},{"location":"snippets/view-code/","title":"View code","text":"<p>View the Code</p> <p>The code for this repository is hosted on GitHub. Click the \"View Code on GitHub\" link above.</p>"}]}