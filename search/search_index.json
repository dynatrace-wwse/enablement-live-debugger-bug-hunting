{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Live Debugger Tutorial - Bug Hunting the TODO App","text":"<p>Support Policy</p> <p>This is an enablement project created by the Center of Excellence - Enablement Team at Dynatrace.</p> <p>Support is provided via GitHub issues only. The materials provided in this repository are offered \"as-is\" without any warranties, express or implied. Use them at your own risk.</p>"},{"location":"#whats-this-tutorial-all-about","title":"What's this tutorial all about","text":"<p>In this tutorial we will embark a Bug Hunting journey learning the different features of the Live Debbuging Capabilities of the Dynatrace Plattform.</p> <p>The Live Debugger is a solution within the package of Observability for Developers of the Dynatrace Platform which provides developers with instant access to code-level debug data needed to troubleshoot and understand complex, modern applications with no extra coding, redeployments, or restarts.</p> <ul> <li>Debug in any environment or application and run with any architecture</li> <li>Instant insights and data from any issue</li> <li>Full visibility into code</li> <li>Instantly debug complex workflows</li> <li>Built for hybrid cloud architectures and large-scale deployments</li> <li>Robust security and data privacy controls</li> <li>Increase developer satisfaction &amp; happiness (remove frustrations)</li> </ul> <p>Are you ready to start the Bug hunting journey and ready to learn how to improve and empower the Developers Productivity? </p> <ul> <li>Yes! let's begin </li> </ul>"},{"location":"bughunt/","title":"3. Bug Hunting","text":""},{"location":"bughunt/#what-is-this","title":"What is this?","text":"<p>We prepared for you a few manually introduced bugs in order to learn how to use Rookout. The first two will make sure you understand how to create and analyze our default rule - Dump Frame. The third bug will introduce a new rule type - Log. You will be walked through the process of editing the rule in order to add custom elements to it.</p> <p>For more information about Rule Scripting refer to our reference</p>"},{"location":"bughunt/#bug-scenarios","title":"Bug scenarios","text":"<p>Level: Beginner - The bug: <code>Clear Completed</code> button does not work. When clicked - completed todos are not cleared.     - Reproduce: Add a few todos, check one or more as completed using the checkbox on the left of the task and click the <code>Clear completed</code> button on the bottom right corner. </p> <pre><code>- **Debug:**  \n    1. Load the app's code from github / local - as explained [in here](README.md#usage) \n    2. In the [Rookout app](https://app.rookout.com), open the file `src/main/java/com/rookout/tutorial/TodoController.java`  \n    ![TodoController.java](/img/screenshots/java-tutorial_1.png)\n    3. Add a `dumpframe` rule on the `return` of the `clearCompleted` function by clicking left to the line numbering (just like you would have created a breakpoint on an IDE)  \n     ![Clear Completed](/img/screenshots/java_bughunt_1.png)\n    4. Try clicking on `Clear completed` again to see the message that pops in the Rookout app\n    5. We can now see the whole stacktrace leading to this point and the local variables:  \n    ![Clear Completed](/img/screenshots/java_bughunt_2.png)\n    6. Notice how we created a new variable `todoStore` instead of overriding `todos`\n    7. Now we know what the bug is!\n</code></pre> <p>Level: Beginner - __The bug: Special characters (&lt;,&gt;,;,<code>,&amp;,/,\\\\) are not being accepted as part of the title when Adding or Updating a Todo.__     - **Reproduce:** Add a todo with special characters. All of these characters should disappear.     - **Debug:**         1. In the Rookout app, open the file</code>src/main/java/com/rookout/tutorial/TodoController.java<code>2. In the addTodo function you will we see that the todo title is being filtered by</code>replaceAll<code>with a regex - Let's add a</code>Dump Frame<code>to the line after it         ![newTodoRecord](/img/screenshots/java_bughunt_3.png)         3. Try to add a todo with some special characters (e.g:</code>do &lt;&gt; this<code>)         4. We can clearly see both</code>newTodoRecord.title<code>and</code>todoTitle` - which is the cleaned title.         </p> <p>Level: Intermediate - The bug: Duplicate Todo adds an invalid todo instead of an exact copy of an existing one.     - Reproduce: Add a task and when hovering on the text, on the right side you have the &amp; symbol. Click on it to duplicate the task.     - Debug:         1. In the Rookout app, open the file <code>src/main/java/com/rookout/tutorial/TodoController.java</code>         2. Using the Rules pane on the right, select the Rule Type \"Log\"         3. Add the rule in the duplicateTodo function on the line with <code>todos.add(newTodoRecord);</code>         4. Before triggering the rule, let's edit it so it returns what we want         5. In the Rules pane on the right, click the Edit Rule (pen) icon next to the rule you just added. It will open up the Rule configuration as a JSON file         6. On line 37 in the <code>paths</code> object let's add a property <code>\"store.rookout.locals.dup\": \"frame.newTodoRecord\"</code>         7. On line 51 we have <code>processing.operations</code> object, let's add a new operation in the array :         name: send_rookout - means we are sending the information to the rookout web application path: store.rookout.locals.dup - we tell the rule what information to send</p> <pre><code>    ```\n    {\n        \"name\": \"send_rookout\",\n        \"path\": \"store.rookout.locals.dup\"\n    }\n    ```\n    8. Click the save button on the upper pane.\n    9. Add and duplicate a todo in order to see the output, now we can see what is being given to the object and match if we have an error in the function (parameters missing or in bad order).\n    ![Invalid Duplicate Todo Record](/img/screenshots/java_bughunt_5.png)\n</code></pre>"},{"location":"bughunt/#next-steps","title":"Next steps","text":"<p>Head over to our reference to understand all the Rookout components.  See our installation guides for platform-specific installation examples.</p>"},{"location":"cleanup/","title":"8. Cleanup","text":"<p>To cleanup resources, go to https://github.com/codespaces and delete the codespace.</p> <p>You may also want to deactivate or delete the API token.</p> <ul> <li>What's Next? </li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Requirements</p> <ul> <li>A Grail enabled Dynatrace SaaS Tenant (sign up here).</li> <li>A GitHub account to interact with the demo repository.</li> </ul>"},{"location":"getting-started/#1-dynatrace-tenant-setup","title":"1. Dynatrace Tenant Setup","text":"<p>You will need a Dynatrace SaaS tenant with a DPS pricing model and the 'Code Monitoring' rate card should be associated with it. In addition the application needs to be monitored with Dynatrace FullStack mode. The application runtime: Java, NodeJS.</p>"},{"location":"getting-started/#2-getting-the-permissions-for-monitoring-the-kubernetes-cluster-with-dynatrace","title":"2. Getting the permissions for monitoring the Kubernetes Cluster with Dynatrace","text":"<p>This codespace has everything automated for you so you can focus on what matters which in this enablement is to learn about the Live Debugging capabilities of the Dynatrace Platform.  You'll need two tokens:</p> <ol> <li>Operator Token</li> <li>Ingest Token </li> </ol> <p>We will get this two very easy from the Kubernetes App. </p>"},{"location":"getting-started/#21-get-the-operator-token-and-the-ingest-token-from-the-kubernetes-app","title":"2.1. Get the Operator Token and the Ingest Token from the Kubernetes App","text":"<ol> <li>Open the Kubernetes App</li> <li>Select the + Add cluster button</li> <li>Scroll down to the section Install Dynatrace Operator </li> <li>Click on generate Token for the 'Dynatrace Operator' and save it to your Notepad</li> <li>Click on generate Token for the 'Data Ingest Token' and save it to your Notepad</li> <li>You can close the Kubernetes App, we don't need it, we just needed the tokens.</li> </ol> <p>Add img K8s App</p> <p>TODO:add image of K8s App</p> <p>Let's launch the Codespace</p> <p>Now we are ready to launch the Codespace! You'll need your tenant and the two tokens previuosly gathered from above. When you enter the tenant please enter it without the 'apps' part, for production tenants eg. abc123 for live -&gt; https://abc123.live.dynatrace.com and for sprint -&gt; https://abc123.sprint.dynatracelabs.com no apps in the URL.</p>"},{"location":"getting-started/#3-launch-codespace","title":"3. Launch Codespace","text":""},{"location":"getting-started/#31-machine-type-variables","title":"3.1 Machine Type &amp; Variables","text":"<p>As a machine type select 4-core and enter your credentials within the following variables:</p> <ul> <li>DT_TENANT</li> <li>DT_OPERATOR_TOKEN</li> <li>DT_INGEST_TOKEN</li> </ul>"},{"location":"getting-started/#4-grab-a-coffee","title":"4. Grab a Coffee","text":"<p>We know your time is very valuable. This codespace takes around 6 minutes to be fully operational. A local Kubernetes (kind) cluster monitored by Dynatrace will be configured and in it a sample application, the TODO app will be deployed. To make your experience best, we are also installing and configuring tools like:</p> <p>k9s kubectl helm node jq python3 gh</p>"},{"location":"getting-started/#3-explore-what-has-been-deployed","title":"3. Explore What Has Been Deployed","text":"<p>Your Codespace has now deployed the following resources:</p> <ul> <li>A local Kubernetes (kind) cluster monitored by Dynatrace, with some pre-deployed apps   that will be used later in the demo.</li> </ul> <p>TODO: Create some context on Bugs, Some Breaking Points stuff, elevate the talk for Developers.</p>"},{"location":"getting-started/#7-troubleshooting","title":"7. Troubleshooting","text":"<p>TODO: Troubleshooting steps on the codespace, also add tips and tricks, show that the functions are loaded in the shell.</p> <ul> <li>Click Here to Continue </li> </ul>"},{"location":"resources/","title":"9. Resources","text":"<p>TODO</p>"},{"location":"whats-next/","title":"10. What's Next?","text":"<p>Content here about what the user should do, where they should and what they could learn next.</p>"},{"location":"snippets/admonitions/","title":"Admonitions","text":"<p>Warning</p> <p>This is a Warning </p> <p>Note</p> <p>This is a Note </p> <p>Important</p> <p>This is important </p> <p>Tipp</p> <p>This is a tipp </p>"},{"location":"snippets/disclaimer/","title":"Disclaimer","text":"<p>Support Policy</p> <p>This is an enablement project created by the Center of Excellence - Enablement Team at Dynatrace.</p> <p>Support is provided via GitHub issues only. The materials provided in this repository are offered \"as-is\" without any warranties, express or implied. Use them at your own risk.</p>"},{"location":"snippets/grail-requirements/","title":"Grail requirements","text":"<p>Requirements</p> <ul> <li>A Grail enabled Dynatrace SaaS Tenant (sign up here).</li> <li>A GitHub account to interact with the demo repository.</li> </ul>"},{"location":"snippets/view-code/","title":"View code","text":"<p>View the Code</p> <p>The code for this repository is hosted on GitHub. Click the \"View Code on GitHub\" link above.</p>"}]}